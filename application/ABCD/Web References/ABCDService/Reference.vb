'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5485.
'
Namespace ABCDService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private InsertItemDtlInfoToStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewBoxListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipmentInfoByShipmentReqNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipmentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteShipmentReqInfoTrByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertShipReqInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertShipReqInfoTrWithDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateShipReqInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateShipReqInfoTrWithDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetShipReqInfoTrCompleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShipmentInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteShipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemDtlInfoShipFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseTrByBarcodeNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseTrByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WarehouseTrInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteWarehouseTrByBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertWarehouseTrInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertWarehouseTrInfoToStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcodeExportExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExportBarcodeIntoMoldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWhInfoTrListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStockReqInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStockReqDtlInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStockResultDtlInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertStockReqDtlInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckStocktakingIsEmptyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCodeMasterMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnitByCode2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProductInfoInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailByItemCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImproveScreenProductInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataProductInfoInquiryWithModeNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertScreenProductInfoInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailByWorkOrderNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailByBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemDetailByBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailByWorkNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailByWorkNoOrderBarcodeAscOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateQuantityInBoxByBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrintBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipmentInquiryByInvoiceNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckDataIsValidToReturnW900OperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsExistW900OrW830OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoOddBoxByItemCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOddToEvenBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintNewLabelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportWarehouseOfflineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReasonByCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReasonInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventsLoginDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataInUserMasterMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoProccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseStatusTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUserPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWOInfoByWONoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWOInfoByWONoJoinItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertWOInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWOInfoListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWOInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteWOInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIssueFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIssueFlagToStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkRackNoExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkBarcodeExistSelectedRackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetRackToW830OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcodeExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportBarcodeIntoQCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStkMvRackNoExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStkMvBarcodeExistDestRackNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockMoveW830OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRejectBarcodeExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RejectBarcodeIntoW9902OperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRetrieveRackCDExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRetrieveBarcodeExistSelectedRackOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveBarcodeIntoQCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStocktkReqDateExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStocktkBarcodeExistSelectedReqDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StocktakingBarcodeQCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcodeImportFGExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportFGBarcodeIntoQCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShipmentReturnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkRejFGBarcodeExistW830OperationCompleted As System.Threading.SendOrPostCallback
        
        Private RejectFGBarcodeIntoW9902OperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkShipReqNoExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkPalletNoExistShipReqNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBarcodeExistShipReqNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShipmentBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRackInfoByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertRackInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRackInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteRackInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RackInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckRackIsEmptyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextCusIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertCustomerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerInfoByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCustomerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCustomerInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CustomerInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStocktFGkReqDateExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStockFGRackNoExistProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStockFGValidBarcodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StocktakingBarcodeFGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemInfoByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertItemInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateItemInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteItemInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ItemInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProductInfoByItemCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemCustomerInfoByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemDetailInfoByBCFromToOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentBoxNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCurrentBoxNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCurrentBoxNumberToStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseHistTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertWarehouseHistTrInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertWarehouseHistTrInfoToStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipmentReqDetailByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteShipmentReqDtlInfoTrByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertShipmentReqDtlInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipmentActDetailByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvaiableBarcodeByItemCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertShipmentActDtlInfoTrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkStkDelBarcodeExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockDeleteW900OperationCompleted As System.Threading.SendOrPostCallback
        
        Private StockDeleteW830OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarehouseInfoByCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertItemDtlInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ABCD.My.MySettings.Default.ABCD_ABCDService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event InsertItemDtlInfoToStringCompleted As InsertItemDtlInfoToStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewBoxListCompleted As GetNewBoxListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipmentInfoByShipmentReqNoCompleted As GetShipmentInfoByShipmentReqNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipmentInfoCompleted As GetShipmentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteShipmentReqInfoTrByCdCompleted As DeleteShipmentReqInfoTrByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertShipReqInfoTrCompleted As InsertShipReqInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertShipReqInfoTrWithDetailCompleted As InsertShipReqInfoTrWithDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateShipReqInfoTrCompleted As UpdateShipReqInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateShipReqInfoTrWithDetailCompleted As UpdateShipReqInfoTrWithDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event SetShipReqInfoTrCompleteCompleted As SetShipReqInfoTrCompleteCompletedEventHandler
        
        '''<remarks/>
        Public Event ShipmentInquiryCompleted As ShipmentInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteShipmentCompleted As ExecuteShipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemDtlInfoShipFlagCompleted As UpdateItemDtlInfoShipFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseTrByBarcodeNoCompleted As GetWarehouseTrByBarcodeNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseTrByCdCompleted As GetWarehouseTrByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event WarehouseTrInquiryCompleted As WarehouseTrInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseListCompleted As GetWarehouseListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteWarehouseTrByBarcodeCompleted As DeleteWarehouseTrByBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertWarehouseTrInfoCompleted As InsertWarehouseTrInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertWarehouseTrInfoToStringCompleted As InsertWarehouseTrInfoToStringCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcodeExportExistProcessCompleted As CheckBarcodeExportExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ExportBarcodeIntoMoldCompleted As ExportBarcodeIntoMoldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWhInfoTrListCompleted As GetWhInfoTrListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStockReqInfoTrCompleted As GetStockReqInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStockReqDtlInfoTrCompleted As GetStockReqDtlInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStockResultDtlInfoTrCompleted As GetStockResultDtlInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertStockReqDtlInfoTrCompleted As InsertStockReqDtlInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckStocktakingIsEmptyCompleted As CheckStocktakingIsEmptyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCodeMasterMSCompleted As GetCodeMasterMSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnitByCode2Completed As GetUnitByCode2CompletedEventHandler
        
        '''<remarks/>
        Public Event ProductInfoInquiryCompleted As ProductInfoInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailByItemCdCompleted As GetItemDetailByItemCdCompletedEventHandler
        
        '''<remarks/>
        Public Event ImproveScreenProductInquiryCompleted As ImproveScreenProductInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataProductInfoInquiryWithModeNewCompleted As GetDataProductInfoInquiryWithModeNewCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertScreenProductInfoInquiryCompleted As InsertScreenProductInfoInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBarcodeCompleted As GetBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailByWorkOrderNoCompleted As GetItemDetailByWorkOrderNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailByBarcodeCompleted As GetItemDetailByBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemDetailByBarcodeCompleted As UpdateItemDetailByBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListBarcodeCompleted As GetListBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemDetailCompleted As UpdateItemDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailByWorkNoCompleted As GetItemDetailByWorkNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailByWorkNoOrderBarcodeAscCompleted As GetItemDetailByWorkNoOrderBarcodeAscCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateQuantityInBoxByBarcodeCompleted As UpdateQuantityInBoxByBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrintBarcodeCompleted As GetPrintBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipmentInquiryByInvoiceNoCompleted As GetShipmentInquiryByInvoiceNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckDataIsValidToReturnW900Completed As CheckDataIsValidToReturnW900CompletedEventHandler
        
        '''<remarks/>
        Public Event IsExistW900OrW830Completed As IsExistW900OrW830CompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoOddBoxByItemCodeCompleted As GetInfoOddBoxByItemCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOddToEvenBoxCompleted As UpdateOddToEvenBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintNewLabelCompleted As PrintNewLabelCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportWarehouseOfflineCompleted As ImportWarehouseOfflineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReasonByCodeCompleted As GetReasonByCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertReasonCompleted As InsertReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReasonCompleted As UpdateReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteReasonCompleted As DeleteReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event ReasonInquiryCompleted As ReasonInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventsLoginDataSetCompleted As GetEventsLoginDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataInUserMasterMSCompleted As GetDataInUserMasterMSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoProccessCompleted As GetUserInfoProccessCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUserInfoCompleted As InsertUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserInfoCompleted As UpdateUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserInfoCompleted As DeleteUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UserInquiryCompleted As UserInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseStatusTrCompleted As GetWarehouseStatusTrCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUserPasswordCompleted As ChangeUserPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoByIDCompleted As GetUserInfoByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWOInfoByWONoCompleted As GetWOInfoByWONoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWOInfoByWONoJoinItemCompleted As GetWOInfoByWONoJoinItemCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertWOInfoCompleted As InsertWOInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWOInfoListCompleted As GetWOInfoListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWOInfoCompleted As UpdateWOInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteWOInfoCompleted As DeleteWOInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIssueFlagCompleted As UpdateIssueFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIssueFlagToStringCompleted As UpdateIssueFlagToStringCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkRackNoExistProcessCompleted As ChkRackNoExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkBarcodeExistSelectedRackCompleted As ChkBarcodeExistSelectedRackCompletedEventHandler
        
        '''<remarks/>
        Public Event SetRackToW830Completed As SetRackToW830CompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcodeExistProcessCompleted As CheckBarcodeExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportBarcodeIntoQCCompleted As ImportBarcodeIntoQCCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStkMvRackNoExistProcessCompleted As ChkStkMvRackNoExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStkMvBarcodeExistDestRackNoCompleted As ChkStkMvBarcodeExistDestRackNoCompletedEventHandler
        
        '''<remarks/>
        Public Event StockMoveW830Completed As StockMoveW830CompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRejectBarcodeExistProcessCompleted As CheckRejectBarcodeExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event RejectBarcodeIntoW9902Completed As RejectBarcodeIntoW9902CompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRetrieveRackCDExistProcessCompleted As CheckRetrieveRackCDExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRetrieveBarcodeExistSelectedRackCompleted As CheckRetrieveBarcodeExistSelectedRackCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveBarcodeIntoQCCompleted As RetrieveBarcodeIntoQCCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStocktkReqDateExistCompleted As ChkStocktkReqDateExistCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStocktkBarcodeExistSelectedReqDateCompleted As ChkStocktkBarcodeExistSelectedReqDateCompletedEventHandler
        
        '''<remarks/>
        Public Event StocktakingBarcodeQCCompleted As StocktakingBarcodeQCCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcodeImportFGExistProcessCompleted As CheckBarcodeImportFGExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportFGBarcodeIntoQCCompleted As ImportFGBarcodeIntoQCCompletedEventHandler
        
        '''<remarks/>
        Public Event ShipmentReturnCompleted As ShipmentReturnCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkRejFGBarcodeExistW830Completed As ChkRejFGBarcodeExistW830CompletedEventHandler
        
        '''<remarks/>
        Public Event RejectFGBarcodeIntoW9902Completed As RejectFGBarcodeIntoW9902CompletedEventHandler
        
        '''<remarks/>
        Public Event ChkShipReqNoExistCompleted As ChkShipReqNoExistCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkPalletNoExistShipReqNoCompleted As ChkPalletNoExistShipReqNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBarcodeExistShipReqNoCompleted As CheckBarcodeExistShipReqNoCompletedEventHandler
        
        '''<remarks/>
        Public Event ShipmentBarcodeCompleted As ShipmentBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRackInfoByCdCompleted As GetRackInfoByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertRackInfoCompleted As InsertRackInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRackInfoCompleted As UpdateRackInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteRackInfoCompleted As DeleteRackInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event RackInquiryCompleted As RackInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckRackIsEmptyCompleted As CheckRackIsEmptyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextCusIdCompleted As GetNextCusIdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertCustomerInfoCompleted As InsertCustomerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerInfoByIDCompleted As GetCustomerInfoByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCustomerInfoCompleted As UpdateCustomerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCustomerInfoCompleted As DeleteCustomerInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CustomerInquiryCompleted As CustomerInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStocktFGkReqDateExistCompleted As ChkStocktFGkReqDateExistCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStockFGRackNoExistProcessCompleted As ChkStockFGRackNoExistProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStockFGValidBarcodeCompleted As ChkStockFGValidBarcodeCompletedEventHandler
        
        '''<remarks/>
        Public Event StocktakingBarcodeFGCompleted As StocktakingBarcodeFGCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemInfoByCdCompleted As GetItemInfoByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertItemInfoCompleted As InsertItemInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateItemInfoCompleted As UpdateItemInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteItemInfoCompleted As DeleteItemInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ItemInquiryCompleted As ItemInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProductInfoByItemCodeCompleted As GetProductInfoByItemCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemCustomerInfoByCdCompleted As GetItemCustomerInfoByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemDetailInfoByBCFromToCompleted As GetItemDetailInfoByBCFromToCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentBoxNumberCompleted As GetCurrentBoxNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCurrentBoxNumberCompleted As UpdateCurrentBoxNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCurrentBoxNumberToStringCompleted As UpdateCurrentBoxNumberToStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseHistTrCompleted As GetWarehouseHistTrCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertWarehouseHistTrInfoCompleted As InsertWarehouseHistTrInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertWarehouseHistTrInfoToStringCompleted As InsertWarehouseHistTrInfoToStringCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipmentReqDetailByCdCompleted As GetShipmentReqDetailByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteShipmentReqDtlInfoTrByCdCompleted As DeleteShipmentReqDtlInfoTrByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertShipmentReqDtlInfoTrCompleted As InsertShipmentReqDtlInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipmentActDetailByCdCompleted As GetShipmentActDetailByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvaiableBarcodeByItemCdCompleted As GetAvaiableBarcodeByItemCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertShipmentActDtlInfoTrCompleted As InsertShipmentActDtlInfoTrCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkStkDelBarcodeExistCompleted As ChkStkDelBarcodeExistCompletedEventHandler
        
        '''<remarks/>
        Public Event StockDeleteW900Completed As StockDeleteW900CompletedEventHandler
        
        '''<remarks/>
        Public Event StockDeleteW830Completed As StockDeleteW830CompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarehouseInfoByCdCompleted As GetWarehouseInfoByCdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertItemDtlInfoCompleted As InsertItemDtlInfoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertItemDtlInfoToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertItemDtlInfoToString(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("InsertItemDtlInfoToString", New Object() {itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertItemDtlInfoToStringAsync(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String)
            Me.InsertItemDtlInfoToStringAsync(itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertItemDtlInfoToStringAsync(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertItemDtlInfoToStringOperationCompleted Is Nothing) Then
                Me.InsertItemDtlInfoToStringOperationCompleted = AddressOf Me.OnInsertItemDtlInfoToStringOperationCompleted
            End If
            Me.InvokeAsync("InsertItemDtlInfoToString", New Object() {itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId}, Me.InsertItemDtlInfoToStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertItemDtlInfoToStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertItemDtlInfoToStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertItemDtlInfoToStringCompleted(Me, New InsertItemDtlInfoToStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNewBoxList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewBoxList(ByVal exportedWoNoCount As Integer, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetNewBoxList", New Object() {exportedWoNoCount, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewBoxListAsync(ByVal exportedWoNoCount As Integer, ByVal loginId As String)
            Me.GetNewBoxListAsync(exportedWoNoCount, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewBoxListAsync(ByVal exportedWoNoCount As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetNewBoxListOperationCompleted Is Nothing) Then
                Me.GetNewBoxListOperationCompleted = AddressOf Me.OnGetNewBoxListOperationCompleted
            End If
            Me.InvokeAsync("GetNewBoxList", New Object() {exportedWoNoCount, loginId}, Me.GetNewBoxListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewBoxListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewBoxListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewBoxListCompleted(Me, New GetNewBoxListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShipmentInfoByShipmentReqNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipmentInfoByShipmentReqNo(ByVal shipmentReqNo As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipmentInfoByShipmentReqNo", New Object() {shipmentReqNo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInfoByShipmentReqNoAsync(ByVal shipmentReqNo As String, ByVal loginId As String)
            Me.GetShipmentInfoByShipmentReqNoAsync(shipmentReqNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInfoByShipmentReqNoAsync(ByVal shipmentReqNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetShipmentInfoByShipmentReqNoOperationCompleted Is Nothing) Then
                Me.GetShipmentInfoByShipmentReqNoOperationCompleted = AddressOf Me.OnGetShipmentInfoByShipmentReqNoOperationCompleted
            End If
            Me.InvokeAsync("GetShipmentInfoByShipmentReqNo", New Object() {shipmentReqNo, loginId}, Me.GetShipmentInfoByShipmentReqNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipmentInfoByShipmentReqNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipmentInfoByShipmentReqNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipmentInfoByShipmentReqNoCompleted(Me, New GetShipmentInfoByShipmentReqNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShipmentInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipmentInfo(ByVal customerId As String, ByVal shipmentDateFrom As Date, ByVal shipmentDateTo As Date, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipmentInfo", New Object() {customerId, shipmentDateFrom, shipmentDateTo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInfoAsync(ByVal customerId As String, ByVal shipmentDateFrom As Date, ByVal shipmentDateTo As Date, ByVal loginId As String)
            Me.GetShipmentInfoAsync(customerId, shipmentDateFrom, shipmentDateTo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInfoAsync(ByVal customerId As String, ByVal shipmentDateFrom As Date, ByVal shipmentDateTo As Date, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetShipmentInfoOperationCompleted Is Nothing) Then
                Me.GetShipmentInfoOperationCompleted = AddressOf Me.OnGetShipmentInfoOperationCompleted
            End If
            Me.InvokeAsync("GetShipmentInfo", New Object() {customerId, shipmentDateFrom, shipmentDateTo, loginId}, Me.GetShipmentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipmentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipmentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipmentInfoCompleted(Me, New GetShipmentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteShipmentReqInfoTrByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteShipmentReqInfoTrByCd(ByVal shipReqNo As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteShipmentReqInfoTrByCd", New Object() {shipReqNo, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteShipmentReqInfoTrByCdAsync(ByVal shipReqNo As String, ByVal loginId As String)
            Me.DeleteShipmentReqInfoTrByCdAsync(shipReqNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteShipmentReqInfoTrByCdAsync(ByVal shipReqNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.DeleteShipmentReqInfoTrByCdOperationCompleted Is Nothing) Then
                Me.DeleteShipmentReqInfoTrByCdOperationCompleted = AddressOf Me.OnDeleteShipmentReqInfoTrByCdOperationCompleted
            End If
            Me.InvokeAsync("DeleteShipmentReqInfoTrByCd", New Object() {shipReqNo, loginId}, Me.DeleteShipmentReqInfoTrByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteShipmentReqInfoTrByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteShipmentReqInfoTrByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteShipmentReqInfoTrByCdCompleted(Me, New DeleteShipmentReqInfoTrByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertShipReqInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertShipReqInfoTr(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String) As String
            Dim results() As Object = Me.Invoke("InsertShipReqInfoTr", New Object() {shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertShipReqInfoTrAsync(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String)
            Me.InsertShipReqInfoTrAsync(shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertShipReqInfoTrAsync(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String, ByVal userState As Object)
            If (Me.InsertShipReqInfoTrOperationCompleted Is Nothing) Then
                Me.InsertShipReqInfoTrOperationCompleted = AddressOf Me.OnInsertShipReqInfoTrOperationCompleted
            End If
            Me.InvokeAsync("InsertShipReqInfoTr", New Object() {shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode}, Me.InsertShipReqInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertShipReqInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertShipReqInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertShipReqInfoTrCompleted(Me, New InsertShipReqInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertShipReqInfoTrWithDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertShipReqInfoTrWithDetail(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal detailDt As System.Data.DataTable, ByVal loginCode As String) As String
            Dim results() As Object = Me.Invoke("InsertShipReqInfoTrWithDetail", New Object() {shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, detailDt, loginCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertShipReqInfoTrWithDetailAsync(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal detailDt As System.Data.DataTable, ByVal loginCode As String)
            Me.InsertShipReqInfoTrWithDetailAsync(shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, detailDt, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertShipReqInfoTrWithDetailAsync(ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal detailDt As System.Data.DataTable, ByVal loginCode As String, ByVal userState As Object)
            If (Me.InsertShipReqInfoTrWithDetailOperationCompleted Is Nothing) Then
                Me.InsertShipReqInfoTrWithDetailOperationCompleted = AddressOf Me.OnInsertShipReqInfoTrWithDetailOperationCompleted
            End If
            Me.InvokeAsync("InsertShipReqInfoTrWithDetail", New Object() {shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, detailDt, loginCode}, Me.InsertShipReqInfoTrWithDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertShipReqInfoTrWithDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertShipReqInfoTrWithDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertShipReqInfoTrWithDetailCompleted(Me, New InsertShipReqInfoTrWithDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateShipReqInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateShipReqInfoTr(ByVal shipReqNo As String, ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateShipReqInfoTr", New Object() {shipReqNo, shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateShipReqInfoTrAsync(ByVal shipReqNo As String, ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String)
            Me.UpdateShipReqInfoTrAsync(shipReqNo, shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateShipReqInfoTrAsync(ByVal shipReqNo As String, ByVal shipReqDate As Date, ByVal shipDate As Date, ByVal cusID As String, ByVal cusPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateShipReqInfoTrOperationCompleted Is Nothing) Then
                Me.UpdateShipReqInfoTrOperationCompleted = AddressOf Me.OnUpdateShipReqInfoTrOperationCompleted
            End If
            Me.InvokeAsync("UpdateShipReqInfoTr", New Object() {shipReqNo, shipReqDate, shipDate, cusID, cusPo, invoiceNo, invoiceDate, loginCode}, Me.UpdateShipReqInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateShipReqInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateShipReqInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateShipReqInfoTrCompleted(Me, New UpdateShipReqInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateShipReqInfoTrWithDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateShipReqInfoTrWithDetail(ByVal shipmentRequestNo As String, ByVal shipmentRequestDate As Date, ByVal shipmentDate As Date, ByVal customerId As String, ByVal customerPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal listData() As String, ByVal registeredId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateShipReqInfoTrWithDetail", New Object() {shipmentRequestNo, shipmentRequestDate, shipmentDate, customerId, customerPo, invoiceNo, invoiceDate, listData, registeredId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateShipReqInfoTrWithDetailAsync(ByVal shipmentRequestNo As String, ByVal shipmentRequestDate As Date, ByVal shipmentDate As Date, ByVal customerId As String, ByVal customerPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal listData() As String, ByVal registeredId As String)
            Me.UpdateShipReqInfoTrWithDetailAsync(shipmentRequestNo, shipmentRequestDate, shipmentDate, customerId, customerPo, invoiceNo, invoiceDate, listData, registeredId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateShipReqInfoTrWithDetailAsync(ByVal shipmentRequestNo As String, ByVal shipmentRequestDate As Date, ByVal shipmentDate As Date, ByVal customerId As String, ByVal customerPo As String, ByVal invoiceNo As String, ByVal invoiceDate As Date, ByVal listData() As String, ByVal registeredId As String, ByVal userState As Object)
            If (Me.UpdateShipReqInfoTrWithDetailOperationCompleted Is Nothing) Then
                Me.UpdateShipReqInfoTrWithDetailOperationCompleted = AddressOf Me.OnUpdateShipReqInfoTrWithDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateShipReqInfoTrWithDetail", New Object() {shipmentRequestNo, shipmentRequestDate, shipmentDate, customerId, customerPo, invoiceNo, invoiceDate, listData, registeredId}, Me.UpdateShipReqInfoTrWithDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateShipReqInfoTrWithDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateShipReqInfoTrWithDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateShipReqInfoTrWithDetailCompleted(Me, New UpdateShipReqInfoTrWithDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetShipReqInfoTrComplete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetShipReqInfoTrComplete(ByVal shipReqNo As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("SetShipReqInfoTrComplete", New Object() {shipReqNo, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetShipReqInfoTrCompleteAsync(ByVal shipReqNo As String, ByVal loginCode As String)
            Me.SetShipReqInfoTrCompleteAsync(shipReqNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetShipReqInfoTrCompleteAsync(ByVal shipReqNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.SetShipReqInfoTrCompleteOperationCompleted Is Nothing) Then
                Me.SetShipReqInfoTrCompleteOperationCompleted = AddressOf Me.OnSetShipReqInfoTrCompleteOperationCompleted
            End If
            Me.InvokeAsync("SetShipReqInfoTrComplete", New Object() {shipReqNo, loginCode}, Me.SetShipReqInfoTrCompleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetShipReqInfoTrCompleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetShipReqInfoTrCompleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetShipReqInfoTrCompleteCompleted(Me, New SetShipReqInfoTrCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShipmentInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShipmentInquiry(ByVal shipStatus As String, ByVal shipReqNo As String, ByVal shipReqDateFrom As String, ByVal shipReqDateTo As String, ByVal shipDateFrom As String, ByVal shipDateTo As String, ByVal cusId As String, ByVal cusPO As String, ByVal invoiceNo As String, ByVal invoiceDate As String, ByVal loginID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ShipmentInquiry", New Object() {shipStatus, shipReqNo, shipReqDateFrom, shipReqDateTo, shipDateFrom, shipDateTo, cusId, cusPO, invoiceNo, invoiceDate, loginID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShipmentInquiryAsync(ByVal shipStatus As String, ByVal shipReqNo As String, ByVal shipReqDateFrom As String, ByVal shipReqDateTo As String, ByVal shipDateFrom As String, ByVal shipDateTo As String, ByVal cusId As String, ByVal cusPO As String, ByVal invoiceNo As String, ByVal invoiceDate As String, ByVal loginID As String)
            Me.ShipmentInquiryAsync(shipStatus, shipReqNo, shipReqDateFrom, shipReqDateTo, shipDateFrom, shipDateTo, cusId, cusPO, invoiceNo, invoiceDate, loginID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShipmentInquiryAsync(ByVal shipStatus As String, ByVal shipReqNo As String, ByVal shipReqDateFrom As String, ByVal shipReqDateTo As String, ByVal shipDateFrom As String, ByVal shipDateTo As String, ByVal cusId As String, ByVal cusPO As String, ByVal invoiceNo As String, ByVal invoiceDate As String, ByVal loginID As String, ByVal userState As Object)
            If (Me.ShipmentInquiryOperationCompleted Is Nothing) Then
                Me.ShipmentInquiryOperationCompleted = AddressOf Me.OnShipmentInquiryOperationCompleted
            End If
            Me.InvokeAsync("ShipmentInquiry", New Object() {shipStatus, shipReqNo, shipReqDateFrom, shipReqDateTo, shipDateFrom, shipDateTo, cusId, cusPO, invoiceNo, invoiceDate, loginID}, Me.ShipmentInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnShipmentInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShipmentInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShipmentInquiryCompleted(Me, New ShipmentInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteShipment", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteShipment(ByVal shipmentRequestNo As String, ByVal listData() As String, ByVal registeredId As String) As Integer
            Dim results() As Object = Me.Invoke("ExecuteShipment", New Object() {shipmentRequestNo, listData, registeredId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteShipmentAsync(ByVal shipmentRequestNo As String, ByVal listData() As String, ByVal registeredId As String)
            Me.ExecuteShipmentAsync(shipmentRequestNo, listData, registeredId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteShipmentAsync(ByVal shipmentRequestNo As String, ByVal listData() As String, ByVal registeredId As String, ByVal userState As Object)
            If (Me.ExecuteShipmentOperationCompleted Is Nothing) Then
                Me.ExecuteShipmentOperationCompleted = AddressOf Me.OnExecuteShipmentOperationCompleted
            End If
            Me.InvokeAsync("ExecuteShipment", New Object() {shipmentRequestNo, listData, registeredId}, Me.ExecuteShipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteShipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteShipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteShipmentCompleted(Me, New ExecuteShipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItemDtlInfoShipFlag", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItemDtlInfoShipFlag(ByVal barcodeNo As String, ByVal shipFlg As Integer, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateItemDtlInfoShipFlag", New Object() {barcodeNo, shipFlg, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDtlInfoShipFlagAsync(ByVal barcodeNo As String, ByVal shipFlg As Integer, ByVal loginId As String)
            Me.UpdateItemDtlInfoShipFlagAsync(barcodeNo, shipFlg, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDtlInfoShipFlagAsync(ByVal barcodeNo As String, ByVal shipFlg As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateItemDtlInfoShipFlagOperationCompleted Is Nothing) Then
                Me.UpdateItemDtlInfoShipFlagOperationCompleted = AddressOf Me.OnUpdateItemDtlInfoShipFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateItemDtlInfoShipFlag", New Object() {barcodeNo, shipFlg, loginId}, Me.UpdateItemDtlInfoShipFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemDtlInfoShipFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemDtlInfoShipFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemDtlInfoShipFlagCompleted(Me, New UpdateItemDtlInfoShipFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseTrByBarcodeNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseTrByBarcodeNo(ByVal barCd As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseTrByBarcodeNo", New Object() {barCd, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseTrByBarcodeNoAsync(ByVal barCd As String, ByVal loginId As String)
            Me.GetWarehouseTrByBarcodeNoAsync(barCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseTrByBarcodeNoAsync(ByVal barCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseTrByBarcodeNoOperationCompleted Is Nothing) Then
                Me.GetWarehouseTrByBarcodeNoOperationCompleted = AddressOf Me.OnGetWarehouseTrByBarcodeNoOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseTrByBarcodeNo", New Object() {barCd, loginId}, Me.GetWarehouseTrByBarcodeNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseTrByBarcodeNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseTrByBarcodeNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseTrByBarcodeNoCompleted(Me, New GetWarehouseTrByBarcodeNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseTrByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseTrByCd(ByVal whCode As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseTrByCd", New Object() {whCode, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseTrByCdAsync(ByVal whCode As String, ByVal loginId As String)
            Me.GetWarehouseTrByCdAsync(whCode, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseTrByCdAsync(ByVal whCode As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseTrByCdOperationCompleted Is Nothing) Then
                Me.GetWarehouseTrByCdOperationCompleted = AddressOf Me.OnGetWarehouseTrByCdOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseTrByCd", New Object() {whCode, loginId}, Me.GetWarehouseTrByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseTrByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseTrByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseTrByCdCompleted(Me, New GetWarehouseTrByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WarehouseTrInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WarehouseTrInquiry(ByVal _whCd As String, ByVal _rackCd As String, ByVal _itemCd As String, ByVal _barcode As String, ByVal _importDateFrom As Date, ByVal _importDateTo As Date, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WarehouseTrInquiry", New Object() {_whCd, _rackCd, _itemCd, _barcode, _importDateFrom, _importDateTo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WarehouseTrInquiryAsync(ByVal _whCd As String, ByVal _rackCd As String, ByVal _itemCd As String, ByVal _barcode As String, ByVal _importDateFrom As Date, ByVal _importDateTo As Date, ByVal loginId As String)
            Me.WarehouseTrInquiryAsync(_whCd, _rackCd, _itemCd, _barcode, _importDateFrom, _importDateTo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WarehouseTrInquiryAsync(ByVal _whCd As String, ByVal _rackCd As String, ByVal _itemCd As String, ByVal _barcode As String, ByVal _importDateFrom As Date, ByVal _importDateTo As Date, ByVal loginId As String, ByVal userState As Object)
            If (Me.WarehouseTrInquiryOperationCompleted Is Nothing) Then
                Me.WarehouseTrInquiryOperationCompleted = AddressOf Me.OnWarehouseTrInquiryOperationCompleted
            End If
            Me.InvokeAsync("WarehouseTrInquiry", New Object() {_whCd, _rackCd, _itemCd, _barcode, _importDateFrom, _importDateTo, loginId}, Me.WarehouseTrInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnWarehouseTrInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.WarehouseTrInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WarehouseTrInquiryCompleted(Me, New WarehouseTrInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseList(ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseList", New Object() {loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseListAsync(ByVal loginId As String)
            Me.GetWarehouseListAsync(loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseListAsync(ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseListOperationCompleted Is Nothing) Then
                Me.GetWarehouseListOperationCompleted = AddressOf Me.OnGetWarehouseListOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseList", New Object() {loginId}, Me.GetWarehouseListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseListCompleted(Me, New GetWarehouseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWarehouseTrByBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteWarehouseTrByBarcode(ByVal barcodeNo As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteWarehouseTrByBarcode", New Object() {barcodeNo, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteWarehouseTrByBarcodeAsync(ByVal barcodeNo As String, ByVal loginCode As String)
            Me.DeleteWarehouseTrByBarcodeAsync(barcodeNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteWarehouseTrByBarcodeAsync(ByVal barcodeNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.DeleteWarehouseTrByBarcodeOperationCompleted Is Nothing) Then
                Me.DeleteWarehouseTrByBarcodeOperationCompleted = AddressOf Me.OnDeleteWarehouseTrByBarcodeOperationCompleted
            End If
            Me.InvokeAsync("DeleteWarehouseTrByBarcode", New Object() {barcodeNo, loginCode}, Me.DeleteWarehouseTrByBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteWarehouseTrByBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteWarehouseTrByBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteWarehouseTrByBarcodeCompleted(Me, New DeleteWarehouseTrByBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWarehouseTrInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertWarehouseTrInfo(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertWarehouseTrInfo", New Object() {barcodeNo, whCd, rackCd, itemCd, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseTrInfoAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String)
            Me.InsertWarehouseTrInfoAsync(barcodeNo, whCd, rackCd, itemCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseTrInfoAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertWarehouseTrInfoOperationCompleted Is Nothing) Then
                Me.InsertWarehouseTrInfoOperationCompleted = AddressOf Me.OnInsertWarehouseTrInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertWarehouseTrInfo", New Object() {barcodeNo, whCd, rackCd, itemCd, loginId}, Me.InsertWarehouseTrInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertWarehouseTrInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertWarehouseTrInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertWarehouseTrInfoCompleted(Me, New InsertWarehouseTrInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWarehouseTrInfoToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertWarehouseTrInfoToString(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("InsertWarehouseTrInfoToString", New Object() {barcodeNo, whCd, rackCd, itemCd, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseTrInfoToStringAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String)
            Me.InsertWarehouseTrInfoToStringAsync(barcodeNo, whCd, rackCd, itemCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseTrInfoToStringAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal rackCd As String, ByVal itemCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertWarehouseTrInfoToStringOperationCompleted Is Nothing) Then
                Me.InsertWarehouseTrInfoToStringOperationCompleted = AddressOf Me.OnInsertWarehouseTrInfoToStringOperationCompleted
            End If
            Me.InvokeAsync("InsertWarehouseTrInfoToString", New Object() {barcodeNo, whCd, rackCd, itemCd, loginId}, Me.InsertWarehouseTrInfoToStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertWarehouseTrInfoToStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertWarehouseTrInfoToStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertWarehouseTrInfoToStringCompleted(Me, New InsertWarehouseTrInfoToStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBarcodeExportExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBarcodeExportExistProcess(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBarcodeExportExistProcess", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExportExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.CheckBarcodeExportExistProcessAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExportExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckBarcodeExportExistProcessOperationCompleted Is Nothing) Then
                Me.CheckBarcodeExportExistProcessOperationCompleted = AddressOf Me.OnCheckBarcodeExportExistProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckBarcodeExportExistProcess", New Object() {barcodeNo, userId}, Me.CheckBarcodeExportExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcodeExportExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcodeExportExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcodeExportExistProcessCompleted(Me, New CheckBarcodeExportExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExportBarcodeIntoMold", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExportBarcodeIntoMold(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String) As Boolean
            Dim results() As Object = Me.Invoke("ExportBarcodeIntoMold", New Object() {barcodeNo, userId, itemCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExportBarcodeIntoMoldAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String)
            Me.ExportBarcodeIntoMoldAsync(barcodeNo, userId, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExportBarcodeIntoMoldAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.ExportBarcodeIntoMoldOperationCompleted Is Nothing) Then
                Me.ExportBarcodeIntoMoldOperationCompleted = AddressOf Me.OnExportBarcodeIntoMoldOperationCompleted
            End If
            Me.InvokeAsync("ExportBarcodeIntoMold", New Object() {barcodeNo, userId, itemCode}, Me.ExportBarcodeIntoMoldOperationCompleted, userState)
        End Sub
        
        Private Sub OnExportBarcodeIntoMoldOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExportBarcodeIntoMoldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExportBarcodeIntoMoldCompleted(Me, New ExportBarcodeIntoMoldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWhInfoTrList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWhInfoTrList(ByVal warehouseCode As String, ByVal itemCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWhInfoTrList", New Object() {warehouseCode, itemCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWhInfoTrListAsync(ByVal warehouseCode As String, ByVal itemCode As String, ByVal loginCode As String)
            Me.GetWhInfoTrListAsync(warehouseCode, itemCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWhInfoTrListAsync(ByVal warehouseCode As String, ByVal itemCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetWhInfoTrListOperationCompleted Is Nothing) Then
                Me.GetWhInfoTrListOperationCompleted = AddressOf Me.OnGetWhInfoTrListOperationCompleted
            End If
            Me.InvokeAsync("GetWhInfoTrList", New Object() {warehouseCode, itemCode, loginCode}, Me.GetWhInfoTrListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWhInfoTrListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWhInfoTrListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWhInfoTrListCompleted(Me, New GetWhInfoTrListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockReqInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStockReqInfoTr(ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStockReqInfoTr", New Object() {loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStockReqInfoTrAsync(ByVal loginCode As String)
            Me.GetStockReqInfoTrAsync(loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStockReqInfoTrAsync(ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetStockReqInfoTrOperationCompleted Is Nothing) Then
                Me.GetStockReqInfoTrOperationCompleted = AddressOf Me.OnGetStockReqInfoTrOperationCompleted
            End If
            Me.InvokeAsync("GetStockReqInfoTr", New Object() {loginCode}, Me.GetStockReqInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStockReqInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStockReqInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStockReqInfoTrCompleted(Me, New GetStockReqInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockReqDtlInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStockReqDtlInfoTr(ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStockReqDtlInfoTr", New Object() {loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStockReqDtlInfoTrAsync(ByVal loginCode As String)
            Me.GetStockReqDtlInfoTrAsync(loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStockReqDtlInfoTrAsync(ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetStockReqDtlInfoTrOperationCompleted Is Nothing) Then
                Me.GetStockReqDtlInfoTrOperationCompleted = AddressOf Me.OnGetStockReqDtlInfoTrOperationCompleted
            End If
            Me.InvokeAsync("GetStockReqDtlInfoTr", New Object() {loginCode}, Me.GetStockReqDtlInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStockReqDtlInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStockReqDtlInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStockReqDtlInfoTrCompleted(Me, New GetStockReqDtlInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockResultDtlInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStockResultDtlInfoTr(ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStockResultDtlInfoTr", New Object() {loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStockResultDtlInfoTrAsync(ByVal loginCode As String)
            Me.GetStockResultDtlInfoTrAsync(loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStockResultDtlInfoTrAsync(ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetStockResultDtlInfoTrOperationCompleted Is Nothing) Then
                Me.GetStockResultDtlInfoTrOperationCompleted = AddressOf Me.OnGetStockResultDtlInfoTrOperationCompleted
            End If
            Me.InvokeAsync("GetStockResultDtlInfoTr", New Object() {loginCode}, Me.GetStockResultDtlInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStockResultDtlInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStockResultDtlInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStockResultDtlInfoTrCompleted(Me, New GetStockResultDtlInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertStockReqDtlInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertStockReqDtlInfoTr(ByVal stockDate As Date, ByVal warehouseCode As String, ByVal itemCode As String, ByVal bcNoList() As String, ByVal whSysCdList() As String, ByVal rackSysCdList() As String, ByVal whActCdList() As String, ByVal rackActCdList() As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("InsertStockReqDtlInfoTr", New Object() {stockDate, warehouseCode, itemCode, bcNoList, whSysCdList, rackSysCdList, whActCdList, rackActCdList, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertStockReqDtlInfoTrAsync(ByVal stockDate As Date, ByVal warehouseCode As String, ByVal itemCode As String, ByVal bcNoList() As String, ByVal whSysCdList() As String, ByVal rackSysCdList() As String, ByVal whActCdList() As String, ByVal rackActCdList() As String, ByVal loginCode As String)
            Me.InsertStockReqDtlInfoTrAsync(stockDate, warehouseCode, itemCode, bcNoList, whSysCdList, rackSysCdList, whActCdList, rackActCdList, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertStockReqDtlInfoTrAsync(ByVal stockDate As Date, ByVal warehouseCode As String, ByVal itemCode As String, ByVal bcNoList() As String, ByVal whSysCdList() As String, ByVal rackSysCdList() As String, ByVal whActCdList() As String, ByVal rackActCdList() As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.InsertStockReqDtlInfoTrOperationCompleted Is Nothing) Then
                Me.InsertStockReqDtlInfoTrOperationCompleted = AddressOf Me.OnInsertStockReqDtlInfoTrOperationCompleted
            End If
            Me.InvokeAsync("InsertStockReqDtlInfoTr", New Object() {stockDate, warehouseCode, itemCode, bcNoList, whSysCdList, rackSysCdList, whActCdList, rackActCdList, loginCode}, Me.InsertStockReqDtlInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertStockReqDtlInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertStockReqDtlInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertStockReqDtlInfoTrCompleted(Me, New InsertStockReqDtlInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckStocktakingIsEmpty", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckStocktakingIsEmpty(ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("CheckStocktakingIsEmpty", New Object() {loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckStocktakingIsEmptyAsync(ByVal loginId As String)
            Me.CheckStocktakingIsEmptyAsync(loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckStocktakingIsEmptyAsync(ByVal loginId As String, ByVal userState As Object)
            If (Me.CheckStocktakingIsEmptyOperationCompleted Is Nothing) Then
                Me.CheckStocktakingIsEmptyOperationCompleted = AddressOf Me.OnCheckStocktakingIsEmptyOperationCompleted
            End If
            Me.InvokeAsync("CheckStocktakingIsEmpty", New Object() {loginId}, Me.CheckStocktakingIsEmptyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckStocktakingIsEmptyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckStocktakingIsEmptyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckStocktakingIsEmptyCompleted(Me, New CheckStocktakingIsEmptyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCodeMasterMS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCodeMasterMS(ByVal code1 As Integer, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCodeMasterMS", New Object() {code1, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCodeMasterMSAsync(ByVal code1 As Integer, ByVal loginId As String)
            Me.GetCodeMasterMSAsync(code1, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCodeMasterMSAsync(ByVal code1 As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetCodeMasterMSOperationCompleted Is Nothing) Then
                Me.GetCodeMasterMSOperationCompleted = AddressOf Me.OnGetCodeMasterMSOperationCompleted
            End If
            Me.InvokeAsync("GetCodeMasterMS", New Object() {code1, loginId}, Me.GetCodeMasterMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCodeMasterMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCodeMasterMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCodeMasterMSCompleted(Me, New GetCodeMasterMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnitByCode2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnitByCode2(ByVal code2 As Integer, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("GetUnitByCode2", New Object() {code2, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnitByCode2Async(ByVal code2 As Integer, ByVal loginId As String)
            Me.GetUnitByCode2Async(code2, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnitByCode2Async(ByVal code2 As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetUnitByCode2OperationCompleted Is Nothing) Then
                Me.GetUnitByCode2OperationCompleted = AddressOf Me.OnGetUnitByCode2OperationCompleted
            End If
            Me.InvokeAsync("GetUnitByCode2", New Object() {code2, loginId}, Me.GetUnitByCode2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnitByCode2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnitByCode2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnitByCode2Completed(Me, New GetUnitByCode2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProductInfoInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProductInfoInquiry(ByVal itemCdList() As String, ByVal woNoList() As String, ByVal woDateList() As String, ByVal totalBoxList() As String, ByVal qtyPerBoxList() As String, ByVal productQuantityList() As String, ByVal loginCode As String) As String
            Dim results() As Object = Me.Invoke("ProductInfoInquiry", New Object() {itemCdList, woNoList, woDateList, totalBoxList, qtyPerBoxList, productQuantityList, loginCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProductInfoInquiryAsync(ByVal itemCdList() As String, ByVal woNoList() As String, ByVal woDateList() As String, ByVal totalBoxList() As String, ByVal qtyPerBoxList() As String, ByVal productQuantityList() As String, ByVal loginCode As String)
            Me.ProductInfoInquiryAsync(itemCdList, woNoList, woDateList, totalBoxList, qtyPerBoxList, productQuantityList, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProductInfoInquiryAsync(ByVal itemCdList() As String, ByVal woNoList() As String, ByVal woDateList() As String, ByVal totalBoxList() As String, ByVal qtyPerBoxList() As String, ByVal productQuantityList() As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.ProductInfoInquiryOperationCompleted Is Nothing) Then
                Me.ProductInfoInquiryOperationCompleted = AddressOf Me.OnProductInfoInquiryOperationCompleted
            End If
            Me.InvokeAsync("ProductInfoInquiry", New Object() {itemCdList, woNoList, woDateList, totalBoxList, qtyPerBoxList, productQuantityList, loginCode}, Me.ProductInfoInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnProductInfoInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProductInfoInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProductInfoInquiryCompleted(Me, New ProductInfoInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailByItemCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailByItemCd(ByVal itemCd As String, ByVal loginCd As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailByItemCd", New Object() {itemCd, loginCd})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByItemCdAsync(ByVal itemCd As String, ByVal loginCd As String)
            Me.GetItemDetailByItemCdAsync(itemCd, loginCd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByItemCdAsync(ByVal itemCd As String, ByVal loginCd As String, ByVal userState As Object)
            If (Me.GetItemDetailByItemCdOperationCompleted Is Nothing) Then
                Me.GetItemDetailByItemCdOperationCompleted = AddressOf Me.OnGetItemDetailByItemCdOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailByItemCd", New Object() {itemCd, loginCd}, Me.GetItemDetailByItemCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailByItemCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailByItemCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailByItemCdCompleted(Me, New GetItemDetailByItemCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImproveScreenProductInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImproveScreenProductInquiry(ByVal workOrderList() As String, ByVal itemCodeList() As String, ByVal totalBoxList() As String, ByVal currentNumberBoxList() As String, ByVal workOrderDateList() As String, ByVal quantityList() As String, ByVal userCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ImproveScreenProductInquiry", New Object() {workOrderList, itemCodeList, totalBoxList, currentNumberBoxList, workOrderDateList, quantityList, userCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImproveScreenProductInquiryAsync(ByVal workOrderList() As String, ByVal itemCodeList() As String, ByVal totalBoxList() As String, ByVal currentNumberBoxList() As String, ByVal workOrderDateList() As String, ByVal quantityList() As String, ByVal userCode As String)
            Me.ImproveScreenProductInquiryAsync(workOrderList, itemCodeList, totalBoxList, currentNumberBoxList, workOrderDateList, quantityList, userCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImproveScreenProductInquiryAsync(ByVal workOrderList() As String, ByVal itemCodeList() As String, ByVal totalBoxList() As String, ByVal currentNumberBoxList() As String, ByVal workOrderDateList() As String, ByVal quantityList() As String, ByVal userCode As String, ByVal userState As Object)
            If (Me.ImproveScreenProductInquiryOperationCompleted Is Nothing) Then
                Me.ImproveScreenProductInquiryOperationCompleted = AddressOf Me.OnImproveScreenProductInquiryOperationCompleted
            End If
            Me.InvokeAsync("ImproveScreenProductInquiry", New Object() {workOrderList, itemCodeList, totalBoxList, currentNumberBoxList, workOrderDateList, quantityList, userCode}, Me.ImproveScreenProductInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnImproveScreenProductInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImproveScreenProductInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImproveScreenProductInquiryCompleted(Me, New ImproveScreenProductInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataProductInfoInquiryWithModeNew", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataProductInfoInquiryWithModeNew(ByVal itemCode As String, ByVal workOrderNo As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataProductInfoInquiryWithModeNew", New Object() {itemCode, workOrderNo, dateFrom, dateTo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataProductInfoInquiryWithModeNewAsync(ByVal itemCode As String, ByVal workOrderNo As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal loginId As String)
            Me.GetDataProductInfoInquiryWithModeNewAsync(itemCode, workOrderNo, dateFrom, dateTo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataProductInfoInquiryWithModeNewAsync(ByVal itemCode As String, ByVal workOrderNo As String, ByVal dateFrom As String, ByVal dateTo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetDataProductInfoInquiryWithModeNewOperationCompleted Is Nothing) Then
                Me.GetDataProductInfoInquiryWithModeNewOperationCompleted = AddressOf Me.OnGetDataProductInfoInquiryWithModeNewOperationCompleted
            End If
            Me.InvokeAsync("GetDataProductInfoInquiryWithModeNew", New Object() {itemCode, workOrderNo, dateFrom, dateTo, loginId}, Me.GetDataProductInfoInquiryWithModeNewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataProductInfoInquiryWithModeNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataProductInfoInquiryWithModeNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataProductInfoInquiryWithModeNewCompleted(Me, New GetDataProductInfoInquiryWithModeNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertScreenProductInfoInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertScreenProductInfoInquiry(ByVal workOrderNo() As String, ByVal workOrderDate() As String, ByVal itemCode() As String, ByVal remainProduct() As String, ByVal productQuantity() As String, ByVal productDate() As String, ByVal quantityPerBox() As String, ByVal totalBox() As String, ByVal currentBoxNumber() As String, ByVal loginCode As String, ByVal itemName() As String) As Integer
            Dim results() As Object = Me.Invoke("InsertScreenProductInfoInquiry", New Object() {workOrderNo, workOrderDate, itemCode, remainProduct, productQuantity, productDate, quantityPerBox, totalBox, currentBoxNumber, loginCode, itemName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertScreenProductInfoInquiryAsync(ByVal workOrderNo() As String, ByVal workOrderDate() As String, ByVal itemCode() As String, ByVal remainProduct() As String, ByVal productQuantity() As String, ByVal productDate() As String, ByVal quantityPerBox() As String, ByVal totalBox() As String, ByVal currentBoxNumber() As String, ByVal loginCode As String, ByVal itemName() As String)
            Me.InsertScreenProductInfoInquiryAsync(workOrderNo, workOrderDate, itemCode, remainProduct, productQuantity, productDate, quantityPerBox, totalBox, currentBoxNumber, loginCode, itemName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertScreenProductInfoInquiryAsync(ByVal workOrderNo() As String, ByVal workOrderDate() As String, ByVal itemCode() As String, ByVal remainProduct() As String, ByVal productQuantity() As String, ByVal productDate() As String, ByVal quantityPerBox() As String, ByVal totalBox() As String, ByVal currentBoxNumber() As String, ByVal loginCode As String, ByVal itemName() As String, ByVal userState As Object)
            If (Me.InsertScreenProductInfoInquiryOperationCompleted Is Nothing) Then
                Me.InsertScreenProductInfoInquiryOperationCompleted = AddressOf Me.OnInsertScreenProductInfoInquiryOperationCompleted
            End If
            Me.InvokeAsync("InsertScreenProductInfoInquiry", New Object() {workOrderNo, workOrderDate, itemCode, remainProduct, productQuantity, productDate, quantityPerBox, totalBox, currentBoxNumber, loginCode, itemName}, Me.InsertScreenProductInfoInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertScreenProductInfoInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertScreenProductInfoInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertScreenProductInfoInquiryCompleted(Me, New InsertScreenProductInfoInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBarcode(ByVal loginCode As String, ByVal limitData As Integer, ByVal barcodeFrom As String, ByVal barcodeTo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBarcode", New Object() {loginCode, limitData, barcodeFrom, barcodeTo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBarcodeAsync(ByVal loginCode As String, ByVal limitData As Integer, ByVal barcodeFrom As String, ByVal barcodeTo As String)
            Me.GetBarcodeAsync(loginCode, limitData, barcodeFrom, barcodeTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBarcodeAsync(ByVal loginCode As String, ByVal limitData As Integer, ByVal barcodeFrom As String, ByVal barcodeTo As String, ByVal userState As Object)
            If (Me.GetBarcodeOperationCompleted Is Nothing) Then
                Me.GetBarcodeOperationCompleted = AddressOf Me.OnGetBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetBarcode", New Object() {loginCode, limitData, barcodeFrom, barcodeTo}, Me.GetBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBarcodeCompleted(Me, New GetBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailByWorkOrderNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailByWorkOrderNo(ByVal workOrderNo As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailByWorkOrderNo", New Object() {workOrderNo, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkOrderNoAsync(ByVal workOrderNo As String, ByVal loginCode As String)
            Me.GetItemDetailByWorkOrderNoAsync(workOrderNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkOrderNoAsync(ByVal workOrderNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetItemDetailByWorkOrderNoOperationCompleted Is Nothing) Then
                Me.GetItemDetailByWorkOrderNoOperationCompleted = AddressOf Me.OnGetItemDetailByWorkOrderNoOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailByWorkOrderNo", New Object() {workOrderNo, loginCode}, Me.GetItemDetailByWorkOrderNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailByWorkOrderNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailByWorkOrderNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailByWorkOrderNoCompleted(Me, New GetItemDetailByWorkOrderNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailByBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailByBarcode(ByVal barcodeNo As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailByBarcode", New Object() {barcodeNo, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByBarcodeAsync(ByVal barcodeNo As String, ByVal loginCode As String)
            Me.GetItemDetailByBarcodeAsync(barcodeNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByBarcodeAsync(ByVal barcodeNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetItemDetailByBarcodeOperationCompleted Is Nothing) Then
                Me.GetItemDetailByBarcodeOperationCompleted = AddressOf Me.OnGetItemDetailByBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailByBarcode", New Object() {barcodeNo, loginCode}, Me.GetItemDetailByBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailByBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailByBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailByBarcodeCompleted(Me, New GetItemDetailByBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItemDetailByBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItemDetailByBarcode(ByVal barcodeNo As String, ByVal quantity As Integer, ByVal productQuantity As Integer, ByVal woNo As String, ByVal lotNo As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateItemDetailByBarcode", New Object() {barcodeNo, quantity, productQuantity, woNo, lotNo, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDetailByBarcodeAsync(ByVal barcodeNo As String, ByVal quantity As Integer, ByVal productQuantity As Integer, ByVal woNo As String, ByVal lotNo As String, ByVal loginCode As String)
            Me.UpdateItemDetailByBarcodeAsync(barcodeNo, quantity, productQuantity, woNo, lotNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDetailByBarcodeAsync(ByVal barcodeNo As String, ByVal quantity As Integer, ByVal productQuantity As Integer, ByVal woNo As String, ByVal lotNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateItemDetailByBarcodeOperationCompleted Is Nothing) Then
                Me.UpdateItemDetailByBarcodeOperationCompleted = AddressOf Me.OnUpdateItemDetailByBarcodeOperationCompleted
            End If
            Me.InvokeAsync("UpdateItemDetailByBarcode", New Object() {barcodeNo, quantity, productQuantity, woNo, lotNo, loginCode}, Me.UpdateItemDetailByBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemDetailByBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemDetailByBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemDetailByBarcodeCompleted(Me, New UpdateItemDetailByBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListBarcode(ByVal paramWoNo As String, ByVal paramBcFrom As String, ByVal paramBcTo As String, ByVal paramQuantity As Integer, ByVal paramLoginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetListBarcode", New Object() {paramWoNo, paramBcFrom, paramBcTo, paramQuantity, paramLoginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListBarcodeAsync(ByVal paramWoNo As String, ByVal paramBcFrom As String, ByVal paramBcTo As String, ByVal paramQuantity As Integer, ByVal paramLoginCode As String)
            Me.GetListBarcodeAsync(paramWoNo, paramBcFrom, paramBcTo, paramQuantity, paramLoginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListBarcodeAsync(ByVal paramWoNo As String, ByVal paramBcFrom As String, ByVal paramBcTo As String, ByVal paramQuantity As Integer, ByVal paramLoginCode As String, ByVal userState As Object)
            If (Me.GetListBarcodeOperationCompleted Is Nothing) Then
                Me.GetListBarcodeOperationCompleted = AddressOf Me.OnGetListBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetListBarcode", New Object() {paramWoNo, paramBcFrom, paramBcTo, paramQuantity, paramLoginCode}, Me.GetListBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListBarcodeCompleted(Me, New GetListBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItemDetail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItemDetail(ByVal listBarcode() As String, ByVal currentBoxNum As Integer, ByVal itemCode As String, ByVal remainQuantity As Integer, ByVal woNo As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateItemDetail", New Object() {listBarcode, currentBoxNum, itemCode, remainQuantity, woNo, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDetailAsync(ByVal listBarcode() As String, ByVal currentBoxNum As Integer, ByVal itemCode As String, ByVal remainQuantity As Integer, ByVal woNo As String, ByVal loginCode As String)
            Me.UpdateItemDetailAsync(listBarcode, currentBoxNum, itemCode, remainQuantity, woNo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemDetailAsync(ByVal listBarcode() As String, ByVal currentBoxNum As Integer, ByVal itemCode As String, ByVal remainQuantity As Integer, ByVal woNo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateItemDetailOperationCompleted Is Nothing) Then
                Me.UpdateItemDetailOperationCompleted = AddressOf Me.OnUpdateItemDetailOperationCompleted
            End If
            Me.InvokeAsync("UpdateItemDetail", New Object() {listBarcode, currentBoxNum, itemCode, remainQuantity, woNo, loginCode}, Me.UpdateItemDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemDetailCompleted(Me, New UpdateItemDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailByWorkNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailByWorkNo(ByVal woNo As String, ByVal login As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailByWorkNo", New Object() {woNo, login})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkNoAsync(ByVal woNo As String, ByVal login As String)
            Me.GetItemDetailByWorkNoAsync(woNo, login, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkNoAsync(ByVal woNo As String, ByVal login As String, ByVal userState As Object)
            If (Me.GetItemDetailByWorkNoOperationCompleted Is Nothing) Then
                Me.GetItemDetailByWorkNoOperationCompleted = AddressOf Me.OnGetItemDetailByWorkNoOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailByWorkNo", New Object() {woNo, login}, Me.GetItemDetailByWorkNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailByWorkNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailByWorkNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailByWorkNoCompleted(Me, New GetItemDetailByWorkNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailByWorkNoOrderBarcodeAsc", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailByWorkNoOrderBarcodeAsc(ByVal woNo As String, ByVal login As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailByWorkNoOrderBarcodeAsc", New Object() {woNo, login})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkNoOrderBarcodeAscAsync(ByVal woNo As String, ByVal login As String)
            Me.GetItemDetailByWorkNoOrderBarcodeAscAsync(woNo, login, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailByWorkNoOrderBarcodeAscAsync(ByVal woNo As String, ByVal login As String, ByVal userState As Object)
            If (Me.GetItemDetailByWorkNoOrderBarcodeAscOperationCompleted Is Nothing) Then
                Me.GetItemDetailByWorkNoOrderBarcodeAscOperationCompleted = AddressOf Me.OnGetItemDetailByWorkNoOrderBarcodeAscOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailByWorkNoOrderBarcodeAsc", New Object() {woNo, login}, Me.GetItemDetailByWorkNoOrderBarcodeAscOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailByWorkNoOrderBarcodeAscOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailByWorkNoOrderBarcodeAscCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailByWorkNoOrderBarcodeAscCompleted(Me, New GetItemDetailByWorkNoOrderBarcodeAscCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateQuantityInBoxByBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateQuantityInBoxByBarcode(ByVal barcodeFrom As String, ByVal lotNoFrom As String, ByVal quantityFrom As Integer, ByVal barcodeTo As String, ByVal lotNoTo As String, ByVal quantityTo As Integer, ByVal itemCode As String, ByVal currentBoxNum As Integer, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateQuantityInBoxByBarcode", New Object() {barcodeFrom, lotNoFrom, quantityFrom, barcodeTo, lotNoTo, quantityTo, itemCode, currentBoxNum, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateQuantityInBoxByBarcodeAsync(ByVal barcodeFrom As String, ByVal lotNoFrom As String, ByVal quantityFrom As Integer, ByVal barcodeTo As String, ByVal lotNoTo As String, ByVal quantityTo As Integer, ByVal itemCode As String, ByVal currentBoxNum As Integer, ByVal loginCode As String)
            Me.UpdateQuantityInBoxByBarcodeAsync(barcodeFrom, lotNoFrom, quantityFrom, barcodeTo, lotNoTo, quantityTo, itemCode, currentBoxNum, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateQuantityInBoxByBarcodeAsync(ByVal barcodeFrom As String, ByVal lotNoFrom As String, ByVal quantityFrom As Integer, ByVal barcodeTo As String, ByVal lotNoTo As String, ByVal quantityTo As Integer, ByVal itemCode As String, ByVal currentBoxNum As Integer, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateQuantityInBoxByBarcodeOperationCompleted Is Nothing) Then
                Me.UpdateQuantityInBoxByBarcodeOperationCompleted = AddressOf Me.OnUpdateQuantityInBoxByBarcodeOperationCompleted
            End If
            Me.InvokeAsync("UpdateQuantityInBoxByBarcode", New Object() {barcodeFrom, lotNoFrom, quantityFrom, barcodeTo, lotNoTo, quantityTo, itemCode, currentBoxNum, loginCode}, Me.UpdateQuantityInBoxByBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateQuantityInBoxByBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateQuantityInBoxByBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateQuantityInBoxByBarcodeCompleted(Me, New UpdateQuantityInBoxByBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrintBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPrintBarcode(ByVal qtyTo As String, ByVal lgCd As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPrintBarcode", New Object() {qtyTo, lgCd})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrintBarcodeAsync(ByVal qtyTo As String, ByVal lgCd As String)
            Me.GetPrintBarcodeAsync(qtyTo, lgCd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrintBarcodeAsync(ByVal qtyTo As String, ByVal lgCd As String, ByVal userState As Object)
            If (Me.GetPrintBarcodeOperationCompleted Is Nothing) Then
                Me.GetPrintBarcodeOperationCompleted = AddressOf Me.OnGetPrintBarcodeOperationCompleted
            End If
            Me.InvokeAsync("GetPrintBarcode", New Object() {qtyTo, lgCd}, Me.GetPrintBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrintBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrintBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrintBarcodeCompleted(Me, New GetPrintBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShipmentInquiryByInvoiceNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipmentInquiryByInvoiceNo(ByVal invoiceNo As String, ByVal itemCode As String, ByVal registeredId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipmentInquiryByInvoiceNo", New Object() {invoiceNo, itemCode, registeredId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInquiryByInvoiceNoAsync(ByVal invoiceNo As String, ByVal itemCode As String, ByVal registeredId As String)
            Me.GetShipmentInquiryByInvoiceNoAsync(invoiceNo, itemCode, registeredId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipmentInquiryByInvoiceNoAsync(ByVal invoiceNo As String, ByVal itemCode As String, ByVal registeredId As String, ByVal userState As Object)
            If (Me.GetShipmentInquiryByInvoiceNoOperationCompleted Is Nothing) Then
                Me.GetShipmentInquiryByInvoiceNoOperationCompleted = AddressOf Me.OnGetShipmentInquiryByInvoiceNoOperationCompleted
            End If
            Me.InvokeAsync("GetShipmentInquiryByInvoiceNo", New Object() {invoiceNo, itemCode, registeredId}, Me.GetShipmentInquiryByInvoiceNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipmentInquiryByInvoiceNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipmentInquiryByInvoiceNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipmentInquiryByInvoiceNoCompleted(Me, New GetShipmentInquiryByInvoiceNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckDataIsValidToReturnW900", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckDataIsValidToReturnW900(ByVal scanBarcode As String, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("CheckDataIsValidToReturnW900", New Object() {scanBarcode, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckDataIsValidToReturnW900Async(ByVal scanBarcode As String, ByVal loginId As String)
            Me.CheckDataIsValidToReturnW900Async(scanBarcode, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckDataIsValidToReturnW900Async(ByVal scanBarcode As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.CheckDataIsValidToReturnW900OperationCompleted Is Nothing) Then
                Me.CheckDataIsValidToReturnW900OperationCompleted = AddressOf Me.OnCheckDataIsValidToReturnW900OperationCompleted
            End If
            Me.InvokeAsync("CheckDataIsValidToReturnW900", New Object() {scanBarcode, loginId}, Me.CheckDataIsValidToReturnW900OperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckDataIsValidToReturnW900OperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckDataIsValidToReturnW900CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckDataIsValidToReturnW900Completed(Me, New CheckDataIsValidToReturnW900CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsExistW900OrW830", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsExistW900OrW830(ByVal listBarcode As String, ByVal loginUser As String) As Boolean
            Dim results() As Object = Me.Invoke("IsExistW900OrW830", New Object() {listBarcode, loginUser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsExistW900OrW830Async(ByVal listBarcode As String, ByVal loginUser As String)
            Me.IsExistW900OrW830Async(listBarcode, loginUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsExistW900OrW830Async(ByVal listBarcode As String, ByVal loginUser As String, ByVal userState As Object)
            If (Me.IsExistW900OrW830OperationCompleted Is Nothing) Then
                Me.IsExistW900OrW830OperationCompleted = AddressOf Me.OnIsExistW900OrW830OperationCompleted
            End If
            Me.InvokeAsync("IsExistW900OrW830", New Object() {listBarcode, loginUser}, Me.IsExistW900OrW830OperationCompleted, userState)
        End Sub
        
        Private Sub OnIsExistW900OrW830OperationCompleted(ByVal arg As Object)
            If (Not (Me.IsExistW900OrW830CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsExistW900OrW830Completed(Me, New IsExistW900OrW830CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInfoOddBoxByItemCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoOddBoxByItemCode(ByVal barcodeNo As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInfoOddBoxByItemCode", New Object() {barcodeNo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoOddBoxByItemCodeAsync(ByVal barcodeNo As String, ByVal loginId As String)
            Me.GetInfoOddBoxByItemCodeAsync(barcodeNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoOddBoxByItemCodeAsync(ByVal barcodeNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetInfoOddBoxByItemCodeOperationCompleted Is Nothing) Then
                Me.GetInfoOddBoxByItemCodeOperationCompleted = AddressOf Me.OnGetInfoOddBoxByItemCodeOperationCompleted
            End If
            Me.InvokeAsync("GetInfoOddBoxByItemCode", New Object() {barcodeNo, loginId}, Me.GetInfoOddBoxByItemCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoOddBoxByItemCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoOddBoxByItemCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoOddBoxByItemCodeCompleted(Me, New GetInfoOddBoxByItemCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOddToEvenBox", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOddToEvenBox(ByVal infoStr As String, ByVal infoLogin As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateOddToEvenBox", New Object() {infoStr, infoLogin})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOddToEvenBoxAsync(ByVal infoStr As String, ByVal infoLogin As String)
            Me.UpdateOddToEvenBoxAsync(infoStr, infoLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOddToEvenBoxAsync(ByVal infoStr As String, ByVal infoLogin As String, ByVal userState As Object)
            If (Me.UpdateOddToEvenBoxOperationCompleted Is Nothing) Then
                Me.UpdateOddToEvenBoxOperationCompleted = AddressOf Me.OnUpdateOddToEvenBoxOperationCompleted
            End If
            Me.InvokeAsync("UpdateOddToEvenBox", New Object() {infoStr, infoLogin}, Me.UpdateOddToEvenBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOddToEvenBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOddToEvenBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOddToEvenBoxCompleted(Me, New UpdateOddToEvenBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintNewLabel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintNewLabel(ByVal barcodeNo As String, ByVal infoLogin As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("PrintNewLabel", New Object() {barcodeNo, infoLogin})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintNewLabelAsync(ByVal barcodeNo As String, ByVal infoLogin As String)
            Me.PrintNewLabelAsync(barcodeNo, infoLogin, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintNewLabelAsync(ByVal barcodeNo As String, ByVal infoLogin As String, ByVal userState As Object)
            If (Me.PrintNewLabelOperationCompleted Is Nothing) Then
                Me.PrintNewLabelOperationCompleted = AddressOf Me.OnPrintNewLabelOperationCompleted
            End If
            Me.InvokeAsync("PrintNewLabel", New Object() {barcodeNo, infoLogin}, Me.PrintNewLabelOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintNewLabelOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintNewLabelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintNewLabelCompleted(Me, New PrintNewLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportWarehouseOffline", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportWarehouseOffline(ByVal vListBarcode() As String, ByVal vWarehouseCode As String, ByVal vLoginInfo As String) As String
            Dim results() As Object = Me.Invoke("ImportWarehouseOffline", New Object() {vListBarcode, vWarehouseCode, vLoginInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportWarehouseOfflineAsync(ByVal vListBarcode() As String, ByVal vWarehouseCode As String, ByVal vLoginInfo As String)
            Me.ImportWarehouseOfflineAsync(vListBarcode, vWarehouseCode, vLoginInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportWarehouseOfflineAsync(ByVal vListBarcode() As String, ByVal vWarehouseCode As String, ByVal vLoginInfo As String, ByVal userState As Object)
            If (Me.ImportWarehouseOfflineOperationCompleted Is Nothing) Then
                Me.ImportWarehouseOfflineOperationCompleted = AddressOf Me.OnImportWarehouseOfflineOperationCompleted
            End If
            Me.InvokeAsync("ImportWarehouseOffline", New Object() {vListBarcode, vWarehouseCode, vLoginInfo}, Me.ImportWarehouseOfflineOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportWarehouseOfflineOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportWarehouseOfflineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportWarehouseOfflineCompleted(Me, New ImportWarehouseOfflineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReasonByCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReasonByCode(ByVal reasonCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReasonByCode", New Object() {reasonCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReasonByCodeAsync(ByVal reasonCode As String, ByVal loginCode As String)
            Me.GetReasonByCodeAsync(reasonCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReasonByCodeAsync(ByVal reasonCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetReasonByCodeOperationCompleted Is Nothing) Then
                Me.GetReasonByCodeOperationCompleted = AddressOf Me.OnGetReasonByCodeOperationCompleted
            End If
            Me.InvokeAsync("GetReasonByCode", New Object() {reasonCode, loginCode}, Me.GetReasonByCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReasonByCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReasonByCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReasonByCodeCompleted(Me, New GetReasonByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertReason(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String) As Integer
            Dim results() As Object = Me.Invoke("InsertReason", New Object() {reasonCode, reasonName, curUser})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertReasonAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String)
            Me.InsertReasonAsync(reasonCode, reasonName, curUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertReasonAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String, ByVal userState As Object)
            If (Me.InsertReasonOperationCompleted Is Nothing) Then
                Me.InsertReasonOperationCompleted = AddressOf Me.OnInsertReasonOperationCompleted
            End If
            Me.InvokeAsync("InsertReason", New Object() {reasonCode, reasonName, curUser}, Me.InsertReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertReasonCompleted(Me, New InsertReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateReason(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateReason", New Object() {reasonCode, reasonName, curUser})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateReasonAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String)
            Me.UpdateReasonAsync(reasonCode, reasonName, curUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReasonAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String, ByVal userState As Object)
            If (Me.UpdateReasonOperationCompleted Is Nothing) Then
                Me.UpdateReasonOperationCompleted = AddressOf Me.OnUpdateReasonOperationCompleted
            End If
            Me.InvokeAsync("UpdateReason", New Object() {reasonCode, reasonName, curUser}, Me.UpdateReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReasonCompleted(Me, New UpdateReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteReason", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteReason(ByVal reasonCode As String, ByVal curUser As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteReason", New Object() {reasonCode, curUser})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteReasonAsync(ByVal reasonCode As String, ByVal curUser As String)
            Me.DeleteReasonAsync(reasonCode, curUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteReasonAsync(ByVal reasonCode As String, ByVal curUser As String, ByVal userState As Object)
            If (Me.DeleteReasonOperationCompleted Is Nothing) Then
                Me.DeleteReasonOperationCompleted = AddressOf Me.OnDeleteReasonOperationCompleted
            End If
            Me.InvokeAsync("DeleteReason", New Object() {reasonCode, curUser}, Me.DeleteReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteReasonCompleted(Me, New DeleteReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReasonInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReasonInquiry(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReasonInquiry", New Object() {reasonCode, reasonName, curUser})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReasonInquiryAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String)
            Me.ReasonInquiryAsync(reasonCode, reasonName, curUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReasonInquiryAsync(ByVal reasonCode As String, ByVal reasonName As String, ByVal curUser As String, ByVal userState As Object)
            If (Me.ReasonInquiryOperationCompleted Is Nothing) Then
                Me.ReasonInquiryOperationCompleted = AddressOf Me.OnReasonInquiryOperationCompleted
            End If
            Me.InvokeAsync("ReasonInquiry", New Object() {reasonCode, reasonName, curUser}, Me.ReasonInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnReasonInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReasonInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReasonInquiryCompleted(Me, New ReasonInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEventsLoginDataSet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventsLoginDataSet(ByVal userID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEventsLoginDataSet", New Object() {userID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventsLoginDataSetAsync(ByVal userID As String)
            Me.GetEventsLoginDataSetAsync(userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventsLoginDataSetAsync(ByVal userID As String, ByVal userState As Object)
            If (Me.GetEventsLoginDataSetOperationCompleted Is Nothing) Then
                Me.GetEventsLoginDataSetOperationCompleted = AddressOf Me.OnGetEventsLoginDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetEventsLoginDataSet", New Object() {userID}, Me.GetEventsLoginDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventsLoginDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventsLoginDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventsLoginDataSetCompleted(Me, New GetEventsLoginDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataInUserMasterMS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataInUserMasterMS(ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDataInUserMasterMS", New Object() {userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataInUserMasterMSAsync(ByVal userId As String)
            Me.GetDataInUserMasterMSAsync(userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataInUserMasterMSAsync(ByVal userId As String, ByVal userState As Object)
            If (Me.GetDataInUserMasterMSOperationCompleted Is Nothing) Then
                Me.GetDataInUserMasterMSOperationCompleted = AddressOf Me.OnGetDataInUserMasterMSOperationCompleted
            End If
            Me.InvokeAsync("GetDataInUserMasterMS", New Object() {userId}, Me.GetDataInUserMasterMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataInUserMasterMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataInUserMasterMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataInUserMasterMSCompleted(Me, New GetDataInUserMasterMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInfoProccess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfoProccess(ByVal userId As String, ByVal passWord As String) As Integer
            Dim results() As Object = Me.Invoke("GetUserInfoProccess", New Object() {userId, passWord})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoProccessAsync(ByVal userId As String, ByVal passWord As String)
            Me.GetUserInfoProccessAsync(userId, passWord, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoProccessAsync(ByVal userId As String, ByVal passWord As String, ByVal userState As Object)
            If (Me.GetUserInfoProccessOperationCompleted Is Nothing) Then
                Me.GetUserInfoProccessOperationCompleted = AddressOf Me.OnGetUserInfoProccessOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfoProccess", New Object() {userId, passWord}, Me.GetUserInfoProccessOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoProccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoProccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoProccessCompleted(Me, New GetUserInfoProccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertUserInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertUserInfo(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String) As Integer
            Dim results() As Object = Me.Invoke("InsertUserInfo", New Object() {userid, password, username, authority, remark, loginid})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertUserInfoAsync(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String)
            Me.InsertUserInfoAsync(userid, password, username, authority, remark, loginid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUserInfoAsync(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String, ByVal userState As Object)
            If (Me.InsertUserInfoOperationCompleted Is Nothing) Then
                Me.InsertUserInfoOperationCompleted = AddressOf Me.OnInsertUserInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertUserInfo", New Object() {userid, password, username, authority, remark, loginid}, Me.InsertUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUserInfoCompleted(Me, New InsertUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserInfo(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateUserInfo", New Object() {userid, password, username, authority, remark, loginid})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserInfoAsync(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String)
            Me.UpdateUserInfoAsync(userid, password, username, authority, remark, loginid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserInfoAsync(ByVal userid As String, ByVal password As String, ByVal username As String, ByVal authority As Integer, ByVal remark As String, ByVal loginid As String, ByVal userState As Object)
            If (Me.UpdateUserInfoOperationCompleted Is Nothing) Then
                Me.UpdateUserInfoOperationCompleted = AddressOf Me.OnUpdateUserInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserInfo", New Object() {userid, password, username, authority, remark, loginid}, Me.UpdateUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserInfoCompleted(Me, New UpdateUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUserInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUserInfo(ByVal userId As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteUserInfo", New Object() {userId, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUserInfoAsync(ByVal userId As String, ByVal loginId As String)
            Me.DeleteUserInfoAsync(userId, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserInfoAsync(ByVal userId As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.DeleteUserInfoOperationCompleted Is Nothing) Then
                Me.DeleteUserInfoOperationCompleted = AddressOf Me.OnDeleteUserInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteUserInfo", New Object() {userId, loginId}, Me.DeleteUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserInfoCompleted(Me, New DeleteUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserInquiry(ByVal _userId As String, ByVal _remark As String, ByVal _authority As Integer, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("UserInquiry", New Object() {_userId, _remark, _authority, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserInquiryAsync(ByVal _userId As String, ByVal _remark As String, ByVal _authority As Integer, ByVal loginCode As String)
            Me.UserInquiryAsync(_userId, _remark, _authority, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserInquiryAsync(ByVal _userId As String, ByVal _remark As String, ByVal _authority As Integer, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UserInquiryOperationCompleted Is Nothing) Then
                Me.UserInquiryOperationCompleted = AddressOf Me.OnUserInquiryOperationCompleted
            End If
            Me.InvokeAsync("UserInquiry", New Object() {_userId, _remark, _authority, loginCode}, Me.UserInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserInquiryCompleted(Me, New UserInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseStatusTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseStatusTr(ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseStatusTr", New Object() {loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseStatusTrAsync(ByVal loginId As String)
            Me.GetWarehouseStatusTrAsync(loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseStatusTrAsync(ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseStatusTrOperationCompleted Is Nothing) Then
                Me.GetWarehouseStatusTrOperationCompleted = AddressOf Me.OnGetWarehouseStatusTrOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseStatusTr", New Object() {loginId}, Me.GetWarehouseStatusTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseStatusTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseStatusTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseStatusTrCompleted(Me, New GetWarehouseStatusTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeUserPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUserPassword(ByVal userid As String, ByVal password As String) As Integer
            Dim results() As Object = Me.Invoke("ChangeUserPassword", New Object() {userid, password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUserPasswordAsync(ByVal userid As String, ByVal password As String)
            Me.ChangeUserPasswordAsync(userid, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUserPasswordAsync(ByVal userid As String, ByVal password As String, ByVal userState As Object)
            If (Me.ChangeUserPasswordOperationCompleted Is Nothing) Then
                Me.ChangeUserPasswordOperationCompleted = AddressOf Me.OnChangeUserPasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangeUserPassword", New Object() {userid, password}, Me.ChangeUserPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUserPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUserPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUserPasswordCompleted(Me, New ChangeUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInfoByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfoByID(ByVal userCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserInfoByID", New Object() {userCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoByIDAsync(ByVal userCode As String, ByVal loginCode As String)
            Me.GetUserInfoByIDAsync(userCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoByIDAsync(ByVal userCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetUserInfoByIDOperationCompleted Is Nothing) Then
                Me.GetUserInfoByIDOperationCompleted = AddressOf Me.OnGetUserInfoByIDOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfoByID", New Object() {userCode, loginCode}, Me.GetUserInfoByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoByIDCompleted(Me, New GetUserInfoByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWOInfoByWONo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWOInfoByWONo(ByVal woCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWOInfoByWONo", New Object() {woCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoByWONoAsync(ByVal woCode As String, ByVal loginCode As String)
            Me.GetWOInfoByWONoAsync(woCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoByWONoAsync(ByVal woCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetWOInfoByWONoOperationCompleted Is Nothing) Then
                Me.GetWOInfoByWONoOperationCompleted = AddressOf Me.OnGetWOInfoByWONoOperationCompleted
            End If
            Me.InvokeAsync("GetWOInfoByWONo", New Object() {woCode, loginCode}, Me.GetWOInfoByWONoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWOInfoByWONoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWOInfoByWONoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWOInfoByWONoCompleted(Me, New GetWOInfoByWONoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWOInfoByWONoJoinItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWOInfoByWONoJoinItem(ByVal woCode As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWOInfoByWONoJoinItem", New Object() {woCode, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoByWONoJoinItemAsync(ByVal woCode As String, ByVal loginId As String)
            Me.GetWOInfoByWONoJoinItemAsync(woCode, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoByWONoJoinItemAsync(ByVal woCode As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWOInfoByWONoJoinItemOperationCompleted Is Nothing) Then
                Me.GetWOInfoByWONoJoinItemOperationCompleted = AddressOf Me.OnGetWOInfoByWONoJoinItemOperationCompleted
            End If
            Me.InvokeAsync("GetWOInfoByWONoJoinItem", New Object() {woCode, loginId}, Me.GetWOInfoByWONoJoinItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWOInfoByWONoJoinItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWOInfoByWONoJoinItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWOInfoByWONoJoinItemCompleted(Me, New GetWOInfoByWONoJoinItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWOInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertWOInfo(ByVal woNoList() As String, ByVal woDateList() As String, ByVal itemCdList() As String, ByVal proQtyList() As String, ByVal qtyPerBoxList() As String, ByVal totalBoxList() As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertWOInfo", New Object() {woNoList, woDateList, itemCdList, proQtyList, qtyPerBoxList, totalBoxList, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertWOInfoAsync(ByVal woNoList() As String, ByVal woDateList() As String, ByVal itemCdList() As String, ByVal proQtyList() As String, ByVal qtyPerBoxList() As String, ByVal totalBoxList() As String, ByVal loginId As String)
            Me.InsertWOInfoAsync(woNoList, woDateList, itemCdList, proQtyList, qtyPerBoxList, totalBoxList, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertWOInfoAsync(ByVal woNoList() As String, ByVal woDateList() As String, ByVal itemCdList() As String, ByVal proQtyList() As String, ByVal qtyPerBoxList() As String, ByVal totalBoxList() As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertWOInfoOperationCompleted Is Nothing) Then
                Me.InsertWOInfoOperationCompleted = AddressOf Me.OnInsertWOInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertWOInfo", New Object() {woNoList, woDateList, itemCdList, proQtyList, qtyPerBoxList, totalBoxList, loginId}, Me.InsertWOInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertWOInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertWOInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertWOInfoCompleted(Me, New InsertWOInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWOInfoList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWOInfoList(ByVal itemCode As String, ByVal woNo As String, ByVal woDateFrom As Date, ByVal woDateTo As Date, ByVal productQuantity As Integer, ByVal totalBox As Integer, ByVal issueFlag As Integer, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWOInfoList", New Object() {itemCode, woNo, woDateFrom, woDateTo, productQuantity, totalBox, issueFlag, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoListAsync(ByVal itemCode As String, ByVal woNo As String, ByVal woDateFrom As Date, ByVal woDateTo As Date, ByVal productQuantity As Integer, ByVal totalBox As Integer, ByVal issueFlag As Integer, ByVal loginId As String)
            Me.GetWOInfoListAsync(itemCode, woNo, woDateFrom, woDateTo, productQuantity, totalBox, issueFlag, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWOInfoListAsync(ByVal itemCode As String, ByVal woNo As String, ByVal woDateFrom As Date, ByVal woDateTo As Date, ByVal productQuantity As Integer, ByVal totalBox As Integer, ByVal issueFlag As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWOInfoListOperationCompleted Is Nothing) Then
                Me.GetWOInfoListOperationCompleted = AddressOf Me.OnGetWOInfoListOperationCompleted
            End If
            Me.InvokeAsync("GetWOInfoList", New Object() {itemCode, woNo, woDateFrom, woDateTo, productQuantity, totalBox, issueFlag, loginId}, Me.GetWOInfoListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWOInfoListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWOInfoListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWOInfoListCompleted(Me, New GetWOInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWOInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWOInfo(ByVal woCode As String, ByVal woDate As Date, ByVal itemCode As String, ByVal prodQty As Integer, ByVal qtyPerBox As Integer, ByVal totalBox As Integer, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateWOInfo", New Object() {woCode, woDate, itemCode, prodQty, qtyPerBox, totalBox, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWOInfoAsync(ByVal woCode As String, ByVal woDate As Date, ByVal itemCode As String, ByVal prodQty As Integer, ByVal qtyPerBox As Integer, ByVal totalBox As Integer, ByVal loginCode As String)
            Me.UpdateWOInfoAsync(woCode, woDate, itemCode, prodQty, qtyPerBox, totalBox, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWOInfoAsync(ByVal woCode As String, ByVal woDate As Date, ByVal itemCode As String, ByVal prodQty As Integer, ByVal qtyPerBox As Integer, ByVal totalBox As Integer, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateWOInfoOperationCompleted Is Nothing) Then
                Me.UpdateWOInfoOperationCompleted = AddressOf Me.OnUpdateWOInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateWOInfo", New Object() {woCode, woDate, itemCode, prodQty, qtyPerBox, totalBox, loginCode}, Me.UpdateWOInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWOInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWOInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWOInfoCompleted(Me, New UpdateWOInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteWOInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteWOInfo(ByVal woCode As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteWOInfo", New Object() {woCode, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteWOInfoAsync(ByVal woCode As String, ByVal loginCode As String)
            Me.DeleteWOInfoAsync(woCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteWOInfoAsync(ByVal woCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.DeleteWOInfoOperationCompleted Is Nothing) Then
                Me.DeleteWOInfoOperationCompleted = AddressOf Me.OnDeleteWOInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteWOInfo", New Object() {woCode, loginCode}, Me.DeleteWOInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteWOInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteWOInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteWOInfoCompleted(Me, New DeleteWOInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIssueFlag", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIssueFlag(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateIssueFlag", New Object() {woNo, issueFlag, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIssueFlagAsync(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String)
            Me.UpdateIssueFlagAsync(woNo, issueFlag, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIssueFlagAsync(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateIssueFlagOperationCompleted Is Nothing) Then
                Me.UpdateIssueFlagOperationCompleted = AddressOf Me.OnUpdateIssueFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateIssueFlag", New Object() {woNo, issueFlag, loginId}, Me.UpdateIssueFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIssueFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIssueFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIssueFlagCompleted(Me, New UpdateIssueFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateIssueFlagToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIssueFlagToString(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("UpdateIssueFlagToString", New Object() {woNo, issueFlag, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIssueFlagToStringAsync(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String)
            Me.UpdateIssueFlagToStringAsync(woNo, issueFlag, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIssueFlagToStringAsync(ByVal woNo As String, ByVal issueFlag As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateIssueFlagToStringOperationCompleted Is Nothing) Then
                Me.UpdateIssueFlagToStringOperationCompleted = AddressOf Me.OnUpdateIssueFlagToStringOperationCompleted
            End If
            Me.InvokeAsync("UpdateIssueFlagToString", New Object() {woNo, issueFlag, loginId}, Me.UpdateIssueFlagToStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIssueFlagToStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIssueFlagToStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIssueFlagToStringCompleted(Me, New UpdateIssueFlagToStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkRackNoExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkRackNoExistProcess(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkRackNoExistProcess", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkRackNoExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.ChkRackNoExistProcessAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkRackNoExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkRackNoExistProcessOperationCompleted Is Nothing) Then
                Me.ChkRackNoExistProcessOperationCompleted = AddressOf Me.OnChkRackNoExistProcessOperationCompleted
            End If
            Me.InvokeAsync("ChkRackNoExistProcess", New Object() {barcodeNo, userId}, Me.ChkRackNoExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkRackNoExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkRackNoExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkRackNoExistProcessCompleted(Me, New ChkRackNoExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkBarcodeExistSelectedRack", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkBarcodeExistSelectedRack(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkBarcodeExistSelectedRack", New Object() {barcodeNo, userId, rackNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkBarcodeExistSelectedRackAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String)
            Me.ChkBarcodeExistSelectedRackAsync(barcodeNo, userId, rackNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkBarcodeExistSelectedRackAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String, ByVal userState As Object)
            If (Me.ChkBarcodeExistSelectedRackOperationCompleted Is Nothing) Then
                Me.ChkBarcodeExistSelectedRackOperationCompleted = AddressOf Me.OnChkBarcodeExistSelectedRackOperationCompleted
            End If
            Me.InvokeAsync("ChkBarcodeExistSelectedRack", New Object() {barcodeNo, userId, rackNo}, Me.ChkBarcodeExistSelectedRackOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkBarcodeExistSelectedRackOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkBarcodeExistSelectedRackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkBarcodeExistSelectedRackCompleted(Me, New ChkBarcodeExistSelectedRackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetRackToW830", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetRackToW830(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackNo As String) As Boolean
            Dim results() As Object = Me.Invoke("SetRackToW830", New Object() {barcodeNo, userId, itemCode, rackNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetRackToW830Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackNo As String)
            Me.SetRackToW830Async(barcodeNo, userId, itemCode, rackNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetRackToW830Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userState As Object)
            If (Me.SetRackToW830OperationCompleted Is Nothing) Then
                Me.SetRackToW830OperationCompleted = AddressOf Me.OnSetRackToW830OperationCompleted
            End If
            Me.InvokeAsync("SetRackToW830", New Object() {barcodeNo, userId, itemCode, rackNo}, Me.SetRackToW830OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetRackToW830OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetRackToW830CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetRackToW830Completed(Me, New SetRackToW830CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBarcodeExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBarcodeExistProcess(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBarcodeExistProcess", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.CheckBarcodeExistProcessAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckBarcodeExistProcessOperationCompleted Is Nothing) Then
                Me.CheckBarcodeExistProcessOperationCompleted = AddressOf Me.OnCheckBarcodeExistProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckBarcodeExistProcess", New Object() {barcodeNo, userId}, Me.CheckBarcodeExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcodeExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcodeExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcodeExistProcessCompleted(Me, New CheckBarcodeExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportBarcodeIntoQC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportBarcodeIntoQC(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportBarcodeIntoQC", New Object() {barcodeNo, userId, itemCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String)
            Me.ImportBarcodeIntoQCAsync(barcodeNo, userId, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.ImportBarcodeIntoQCOperationCompleted Is Nothing) Then
                Me.ImportBarcodeIntoQCOperationCompleted = AddressOf Me.OnImportBarcodeIntoQCOperationCompleted
            End If
            Me.InvokeAsync("ImportBarcodeIntoQC", New Object() {barcodeNo, userId, itemCode}, Me.ImportBarcodeIntoQCOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportBarcodeIntoQCOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportBarcodeIntoQCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportBarcodeIntoQCCompleted(Me, New ImportBarcodeIntoQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStkMvRackNoExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStkMvRackNoExistProcess(ByVal rackNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStkMvRackNoExistProcess", New Object() {rackNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStkMvRackNoExistProcessAsync(ByVal rackNo As String, ByVal userId As String)
            Me.ChkStkMvRackNoExistProcessAsync(rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStkMvRackNoExistProcessAsync(ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStkMvRackNoExistProcessOperationCompleted Is Nothing) Then
                Me.ChkStkMvRackNoExistProcessOperationCompleted = AddressOf Me.OnChkStkMvRackNoExistProcessOperationCompleted
            End If
            Me.InvokeAsync("ChkStkMvRackNoExistProcess", New Object() {rackNo, userId}, Me.ChkStkMvRackNoExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStkMvRackNoExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStkMvRackNoExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStkMvRackNoExistProcessCompleted(Me, New ChkStkMvRackNoExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStkMvBarcodeExistDestRackNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStkMvBarcodeExistDestRackNo(ByVal barcodeNo As String, ByVal rackNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStkMvBarcodeExistDestRackNo", New Object() {barcodeNo, rackNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStkMvBarcodeExistDestRackNoAsync(ByVal barcodeNo As String, ByVal rackNo As String, ByVal userId As String)
            Me.ChkStkMvBarcodeExistDestRackNoAsync(barcodeNo, rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStkMvBarcodeExistDestRackNoAsync(ByVal barcodeNo As String, ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStkMvBarcodeExistDestRackNoOperationCompleted Is Nothing) Then
                Me.ChkStkMvBarcodeExistDestRackNoOperationCompleted = AddressOf Me.OnChkStkMvBarcodeExistDestRackNoOperationCompleted
            End If
            Me.InvokeAsync("ChkStkMvBarcodeExistDestRackNo", New Object() {barcodeNo, rackNo, userId}, Me.ChkStkMvBarcodeExistDestRackNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStkMvBarcodeExistDestRackNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStkMvBarcodeExistDestRackNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStkMvBarcodeExistDestRackNoCompleted(Me, New ChkStkMvBarcodeExistDestRackNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StockMoveW830", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockMoveW830(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("StockMoveW830", New Object() {barcodeNo, itemCode, rackNo, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockMoveW830Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String)
            Me.StockMoveW830Async(barcodeNo, itemCode, rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockMoveW830Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.StockMoveW830OperationCompleted Is Nothing) Then
                Me.StockMoveW830OperationCompleted = AddressOf Me.OnStockMoveW830OperationCompleted
            End If
            Me.InvokeAsync("StockMoveW830", New Object() {barcodeNo, itemCode, rackNo, userId}, Me.StockMoveW830OperationCompleted, userState)
        End Sub
        
        Private Sub OnStockMoveW830OperationCompleted(ByVal arg As Object)
            If (Not (Me.StockMoveW830CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockMoveW830Completed(Me, New StockMoveW830CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRejectBarcodeExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRejectBarcodeExistProcess(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckRejectBarcodeExistProcess", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRejectBarcodeExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.CheckRejectBarcodeExistProcessAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRejectBarcodeExistProcessAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckRejectBarcodeExistProcessOperationCompleted Is Nothing) Then
                Me.CheckRejectBarcodeExistProcessOperationCompleted = AddressOf Me.OnCheckRejectBarcodeExistProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckRejectBarcodeExistProcess", New Object() {barcodeNo, userId}, Me.CheckRejectBarcodeExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRejectBarcodeExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRejectBarcodeExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRejectBarcodeExistProcessCompleted(Me, New CheckRejectBarcodeExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectBarcodeIntoW9902", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RejectBarcodeIntoW9902(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String) As Boolean
            Dim results() As Object = Me.Invoke("RejectBarcodeIntoW9902", New Object() {barcodeNo, userId, itemCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RejectBarcodeIntoW9902Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String)
            Me.RejectBarcodeIntoW9902Async(barcodeNo, userId, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RejectBarcodeIntoW9902Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.RejectBarcodeIntoW9902OperationCompleted Is Nothing) Then
                Me.RejectBarcodeIntoW9902OperationCompleted = AddressOf Me.OnRejectBarcodeIntoW9902OperationCompleted
            End If
            Me.InvokeAsync("RejectBarcodeIntoW9902", New Object() {barcodeNo, userId, itemCode}, Me.RejectBarcodeIntoW9902OperationCompleted, userState)
        End Sub
        
        Private Sub OnRejectBarcodeIntoW9902OperationCompleted(ByVal arg As Object)
            If (Not (Me.RejectBarcodeIntoW9902CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RejectBarcodeIntoW9902Completed(Me, New RejectBarcodeIntoW9902CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRetrieveRackCDExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRetrieveRackCDExistProcess(ByVal rackCD As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckRetrieveRackCDExistProcess", New Object() {rackCD, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRetrieveRackCDExistProcessAsync(ByVal rackCD As String, ByVal userId As String)
            Me.CheckRetrieveRackCDExistProcessAsync(rackCD, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRetrieveRackCDExistProcessAsync(ByVal rackCD As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckRetrieveRackCDExistProcessOperationCompleted Is Nothing) Then
                Me.CheckRetrieveRackCDExistProcessOperationCompleted = AddressOf Me.OnCheckRetrieveRackCDExistProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckRetrieveRackCDExistProcess", New Object() {rackCD, userId}, Me.CheckRetrieveRackCDExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRetrieveRackCDExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRetrieveRackCDExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRetrieveRackCDExistProcessCompleted(Me, New CheckRetrieveRackCDExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRetrieveBarcodeExistSelectedRack", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRetrieveBarcodeExistSelectedRack(ByVal barcodeNo As String, ByVal rackCD As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckRetrieveBarcodeExistSelectedRack", New Object() {barcodeNo, rackCD, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRetrieveBarcodeExistSelectedRackAsync(ByVal barcodeNo As String, ByVal rackCD As String, ByVal userId As String)
            Me.CheckRetrieveBarcodeExistSelectedRackAsync(barcodeNo, rackCD, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRetrieveBarcodeExistSelectedRackAsync(ByVal barcodeNo As String, ByVal rackCD As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckRetrieveBarcodeExistSelectedRackOperationCompleted Is Nothing) Then
                Me.CheckRetrieveBarcodeExistSelectedRackOperationCompleted = AddressOf Me.OnCheckRetrieveBarcodeExistSelectedRackOperationCompleted
            End If
            Me.InvokeAsync("CheckRetrieveBarcodeExistSelectedRack", New Object() {barcodeNo, rackCD, userId}, Me.CheckRetrieveBarcodeExistSelectedRackOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRetrieveBarcodeExistSelectedRackOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRetrieveBarcodeExistSelectedRackCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRetrieveBarcodeExistSelectedRackCompleted(Me, New CheckRetrieveBarcodeExistSelectedRackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveBarcodeIntoQC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveBarcodeIntoQC(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackCD As String) As Boolean
            Dim results() As Object = Me.Invoke("RetrieveBarcodeIntoQC", New Object() {barcodeNo, userId, itemCode, rackCD})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackCD As String)
            Me.RetrieveBarcodeIntoQCAsync(barcodeNo, userId, itemCode, rackCD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal rackCD As String, ByVal userState As Object)
            If (Me.RetrieveBarcodeIntoQCOperationCompleted Is Nothing) Then
                Me.RetrieveBarcodeIntoQCOperationCompleted = AddressOf Me.OnRetrieveBarcodeIntoQCOperationCompleted
            End If
            Me.InvokeAsync("RetrieveBarcodeIntoQC", New Object() {barcodeNo, userId, itemCode, rackCD}, Me.RetrieveBarcodeIntoQCOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveBarcodeIntoQCOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveBarcodeIntoQCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveBarcodeIntoQCCompleted(Me, New RetrieveBarcodeIntoQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStocktkReqDateExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStocktkReqDateExist(ByVal stockReqDate As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStocktkReqDateExist", New Object() {stockReqDate, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStocktkReqDateExistAsync(ByVal stockReqDate As String, ByVal userId As String)
            Me.ChkStocktkReqDateExistAsync(stockReqDate, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStocktkReqDateExistAsync(ByVal stockReqDate As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStocktkReqDateExistOperationCompleted Is Nothing) Then
                Me.ChkStocktkReqDateExistOperationCompleted = AddressOf Me.OnChkStocktkReqDateExistOperationCompleted
            End If
            Me.InvokeAsync("ChkStocktkReqDateExist", New Object() {stockReqDate, userId}, Me.ChkStocktkReqDateExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStocktkReqDateExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStocktkReqDateExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStocktkReqDateExistCompleted(Me, New ChkStocktkReqDateExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStocktkBarcodeExistSelectedReqDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStocktkBarcodeExistSelectedReqDate(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStocktkBarcodeExistSelectedReqDate", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStocktkBarcodeExistSelectedReqDateAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.ChkStocktkBarcodeExistSelectedReqDateAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStocktkBarcodeExistSelectedReqDateAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStocktkBarcodeExistSelectedReqDateOperationCompleted Is Nothing) Then
                Me.ChkStocktkBarcodeExistSelectedReqDateOperationCompleted = AddressOf Me.OnChkStocktkBarcodeExistSelectedReqDateOperationCompleted
            End If
            Me.InvokeAsync("ChkStocktkBarcodeExistSelectedReqDate", New Object() {barcodeNo, userId}, Me.ChkStocktkBarcodeExistSelectedReqDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStocktkBarcodeExistSelectedReqDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStocktkBarcodeExistSelectedReqDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStocktkBarcodeExistSelectedReqDateCompleted(Me, New ChkStocktkBarcodeExistSelectedReqDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StocktakingBarcodeQC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StocktakingBarcodeQC(ByVal barcodeNo As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("StocktakingBarcodeQC", New Object() {barcodeNo, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StocktakingBarcodeQCAsync(ByVal barcodeNo As String, ByVal userId As String)
            Me.StocktakingBarcodeQCAsync(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StocktakingBarcodeQCAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.StocktakingBarcodeQCOperationCompleted Is Nothing) Then
                Me.StocktakingBarcodeQCOperationCompleted = AddressOf Me.OnStocktakingBarcodeQCOperationCompleted
            End If
            Me.InvokeAsync("StocktakingBarcodeQC", New Object() {barcodeNo, userId}, Me.StocktakingBarcodeQCOperationCompleted, userState)
        End Sub
        
        Private Sub OnStocktakingBarcodeQCOperationCompleted(ByVal arg As Object)
            If (Not (Me.StocktakingBarcodeQCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StocktakingBarcodeQCCompleted(Me, New StocktakingBarcodeQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBarcodeImportFGExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBarcodeImportFGExistProcess(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBarcodeImportFGExistProcess", New Object() {barcodeNo, caseImp, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeImportFGExistProcessAsync(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String)
            Me.CheckBarcodeImportFGExistProcessAsync(barcodeNo, caseImp, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeImportFGExistProcessAsync(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckBarcodeImportFGExistProcessOperationCompleted Is Nothing) Then
                Me.CheckBarcodeImportFGExistProcessOperationCompleted = AddressOf Me.OnCheckBarcodeImportFGExistProcessOperationCompleted
            End If
            Me.InvokeAsync("CheckBarcodeImportFGExistProcess", New Object() {barcodeNo, caseImp, userId}, Me.CheckBarcodeImportFGExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcodeImportFGExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcodeImportFGExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcodeImportFGExistProcessCompleted(Me, New CheckBarcodeImportFGExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportFGBarcodeIntoQC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportFGBarcodeIntoQC(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String, ByVal itemCode As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportFGBarcodeIntoQC", New Object() {barcodeNo, caseImp, userId, itemCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportFGBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String, ByVal itemCode As String)
            Me.ImportFGBarcodeIntoQCAsync(barcodeNo, caseImp, userId, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportFGBarcodeIntoQCAsync(ByVal barcodeNo As String, ByVal caseImp As String, ByVal userId As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.ImportFGBarcodeIntoQCOperationCompleted Is Nothing) Then
                Me.ImportFGBarcodeIntoQCOperationCompleted = AddressOf Me.OnImportFGBarcodeIntoQCOperationCompleted
            End If
            Me.InvokeAsync("ImportFGBarcodeIntoQC", New Object() {barcodeNo, caseImp, userId, itemCode}, Me.ImportFGBarcodeIntoQCOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportFGBarcodeIntoQCOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportFGBarcodeIntoQCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportFGBarcodeIntoQCCompleted(Me, New ImportFGBarcodeIntoQCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShipmentReturn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShipmentReturn(ByVal paramBarcode As String, ByVal paramUserId As String) As Boolean
            Dim results() As Object = Me.Invoke("ShipmentReturn", New Object() {paramBarcode, paramUserId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShipmentReturnAsync(ByVal paramBarcode As String, ByVal paramUserId As String)
            Me.ShipmentReturnAsync(paramBarcode, paramUserId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShipmentReturnAsync(ByVal paramBarcode As String, ByVal paramUserId As String, ByVal userState As Object)
            If (Me.ShipmentReturnOperationCompleted Is Nothing) Then
                Me.ShipmentReturnOperationCompleted = AddressOf Me.OnShipmentReturnOperationCompleted
            End If
            Me.InvokeAsync("ShipmentReturn", New Object() {paramBarcode, paramUserId}, Me.ShipmentReturnOperationCompleted, userState)
        End Sub
        
        Private Sub OnShipmentReturnOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShipmentReturnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShipmentReturnCompleted(Me, New ShipmentReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkRejFGBarcodeExistW830", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkRejFGBarcodeExistW830(ByVal barcodeNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkRejFGBarcodeExistW830", New Object() {barcodeNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkRejFGBarcodeExistW830Async(ByVal barcodeNo As String, ByVal userId As String)
            Me.ChkRejFGBarcodeExistW830Async(barcodeNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkRejFGBarcodeExistW830Async(ByVal barcodeNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkRejFGBarcodeExistW830OperationCompleted Is Nothing) Then
                Me.ChkRejFGBarcodeExistW830OperationCompleted = AddressOf Me.OnChkRejFGBarcodeExistW830OperationCompleted
            End If
            Me.InvokeAsync("ChkRejFGBarcodeExistW830", New Object() {barcodeNo, userId}, Me.ChkRejFGBarcodeExistW830OperationCompleted, userState)
        End Sub
        
        Private Sub OnChkRejFGBarcodeExistW830OperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkRejFGBarcodeExistW830CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkRejFGBarcodeExistW830Completed(Me, New ChkRejFGBarcodeExistW830CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectFGBarcodeIntoW9902", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RejectFGBarcodeIntoW9902(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String) As Boolean
            Dim results() As Object = Me.Invoke("RejectFGBarcodeIntoW9902", New Object() {barcodeNo, userId, itemCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RejectFGBarcodeIntoW9902Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String)
            Me.RejectFGBarcodeIntoW9902Async(barcodeNo, userId, itemCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RejectFGBarcodeIntoW9902Async(ByVal barcodeNo As String, ByVal userId As String, ByVal itemCode As String, ByVal userState As Object)
            If (Me.RejectFGBarcodeIntoW9902OperationCompleted Is Nothing) Then
                Me.RejectFGBarcodeIntoW9902OperationCompleted = AddressOf Me.OnRejectFGBarcodeIntoW9902OperationCompleted
            End If
            Me.InvokeAsync("RejectFGBarcodeIntoW9902", New Object() {barcodeNo, userId, itemCode}, Me.RejectFGBarcodeIntoW9902OperationCompleted, userState)
        End Sub
        
        Private Sub OnRejectFGBarcodeIntoW9902OperationCompleted(ByVal arg As Object)
            If (Not (Me.RejectFGBarcodeIntoW9902CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RejectFGBarcodeIntoW9902Completed(Me, New RejectFGBarcodeIntoW9902CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkShipReqNoExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkShipReqNoExist(ByVal shipNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkShipReqNoExist", New Object() {shipNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkShipReqNoExistAsync(ByVal shipNo As String, ByVal userId As String)
            Me.ChkShipReqNoExistAsync(shipNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkShipReqNoExistAsync(ByVal shipNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkShipReqNoExistOperationCompleted Is Nothing) Then
                Me.ChkShipReqNoExistOperationCompleted = AddressOf Me.OnChkShipReqNoExistOperationCompleted
            End If
            Me.InvokeAsync("ChkShipReqNoExist", New Object() {shipNo, userId}, Me.ChkShipReqNoExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkShipReqNoExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkShipReqNoExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkShipReqNoExistCompleted(Me, New ChkShipReqNoExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkPalletNoExistShipReqNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkPalletNoExistShipReqNo(ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkPalletNoExistShipReqNo", New Object() {shipNo, palletNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkPalletNoExistShipReqNoAsync(ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String)
            Me.ChkPalletNoExistShipReqNoAsync(shipNo, palletNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkPalletNoExistShipReqNoAsync(ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkPalletNoExistShipReqNoOperationCompleted Is Nothing) Then
                Me.ChkPalletNoExistShipReqNoOperationCompleted = AddressOf Me.OnChkPalletNoExistShipReqNoOperationCompleted
            End If
            Me.InvokeAsync("ChkPalletNoExistShipReqNo", New Object() {shipNo, palletNo, userId}, Me.ChkPalletNoExistShipReqNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkPalletNoExistShipReqNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkPalletNoExistShipReqNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkPalletNoExistShipReqNoCompleted(Me, New ChkPalletNoExistShipReqNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBarcodeExistShipReqNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBarcodeExistShipReqNo(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckBarcodeExistShipReqNo", New Object() {barcodeNo, shipNo, palletNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExistShipReqNoAsync(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String)
            Me.CheckBarcodeExistShipReqNoAsync(barcodeNo, shipNo, palletNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBarcodeExistShipReqNoAsync(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.CheckBarcodeExistShipReqNoOperationCompleted Is Nothing) Then
                Me.CheckBarcodeExistShipReqNoOperationCompleted = AddressOf Me.OnCheckBarcodeExistShipReqNoOperationCompleted
            End If
            Me.InvokeAsync("CheckBarcodeExistShipReqNo", New Object() {barcodeNo, shipNo, palletNo, userId}, Me.CheckBarcodeExistShipReqNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBarcodeExistShipReqNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBarcodeExistShipReqNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBarcodeExistShipReqNoCompleted(Me, New CheckBarcodeExistShipReqNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShipmentBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShipmentBarcode(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("ShipmentBarcode", New Object() {barcodeNo, shipNo, palletNo, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShipmentBarcodeAsync(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String)
            Me.ShipmentBarcodeAsync(barcodeNo, shipNo, palletNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShipmentBarcodeAsync(ByVal barcodeNo As String, ByVal shipNo As String, ByVal palletNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ShipmentBarcodeOperationCompleted Is Nothing) Then
                Me.ShipmentBarcodeOperationCompleted = AddressOf Me.OnShipmentBarcodeOperationCompleted
            End If
            Me.InvokeAsync("ShipmentBarcode", New Object() {barcodeNo, shipNo, palletNo, userId}, Me.ShipmentBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnShipmentBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShipmentBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShipmentBarcodeCompleted(Me, New ShipmentBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRackInfoByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRackInfoByCd(ByVal _rackCd As String, ByVal _mode As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRackInfoByCd", New Object() {_rackCd, _mode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRackInfoByCdAsync(ByVal _rackCd As String, ByVal _mode As Integer)
            Me.GetRackInfoByCdAsync(_rackCd, _mode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRackInfoByCdAsync(ByVal _rackCd As String, ByVal _mode As Integer, ByVal userState As Object)
            If (Me.GetRackInfoByCdOperationCompleted Is Nothing) Then
                Me.GetRackInfoByCdOperationCompleted = AddressOf Me.OnGetRackInfoByCdOperationCompleted
            End If
            Me.InvokeAsync("GetRackInfoByCd", New Object() {_rackCd, _mode}, Me.GetRackInfoByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRackInfoByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRackInfoByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRackInfoByCdCompleted(Me, New GetRackInfoByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertRackInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertRackInfo(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertRackInfo", New Object() {rackCd, rackName, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertRackInfoAsync(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String)
            Me.InsertRackInfoAsync(rackCd, rackName, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertRackInfoAsync(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertRackInfoOperationCompleted Is Nothing) Then
                Me.InsertRackInfoOperationCompleted = AddressOf Me.OnInsertRackInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertRackInfo", New Object() {rackCd, rackName, loginId}, Me.InsertRackInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertRackInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertRackInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertRackInfoCompleted(Me, New InsertRackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRackInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRackInfo(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateRackInfo", New Object() {rackCd, rackName, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRackInfoAsync(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String)
            Me.UpdateRackInfoAsync(rackCd, rackName, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRackInfoAsync(ByVal rackCd As String, ByVal rackName As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateRackInfoOperationCompleted Is Nothing) Then
                Me.UpdateRackInfoOperationCompleted = AddressOf Me.OnUpdateRackInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateRackInfo", New Object() {rackCd, rackName, loginId}, Me.UpdateRackInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRackInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRackInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRackInfoCompleted(Me, New UpdateRackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteRackInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteRackInfo(ByVal rackCd As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteRackInfo", New Object() {rackCd, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteRackInfoAsync(ByVal rackCd As String, ByVal loginId As String)
            Me.DeleteRackInfoAsync(rackCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteRackInfoAsync(ByVal rackCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.DeleteRackInfoOperationCompleted Is Nothing) Then
                Me.DeleteRackInfoOperationCompleted = AddressOf Me.OnDeleteRackInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteRackInfo", New Object() {rackCd, loginId}, Me.DeleteRackInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteRackInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteRackInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteRackInfoCompleted(Me, New DeleteRackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RackInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RackInquiry(ByVal _rackCd As String, ByVal _rackName As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RackInquiry", New Object() {_rackCd, _rackName, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RackInquiryAsync(ByVal _rackCd As String, ByVal _rackName As String, ByVal loginId As String)
            Me.RackInquiryAsync(_rackCd, _rackName, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RackInquiryAsync(ByVal _rackCd As String, ByVal _rackName As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.RackInquiryOperationCompleted Is Nothing) Then
                Me.RackInquiryOperationCompleted = AddressOf Me.OnRackInquiryOperationCompleted
            End If
            Me.InvokeAsync("RackInquiry", New Object() {_rackCd, _rackName, loginId}, Me.RackInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnRackInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.RackInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RackInquiryCompleted(Me, New RackInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRackIsEmpty", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckRackIsEmpty(ByVal _rackCd As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("CheckRackIsEmpty", New Object() {_rackCd, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckRackIsEmptyAsync(ByVal _rackCd As String, ByVal loginId As String)
            Me.CheckRackIsEmptyAsync(_rackCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckRackIsEmptyAsync(ByVal _rackCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.CheckRackIsEmptyOperationCompleted Is Nothing) Then
                Me.CheckRackIsEmptyOperationCompleted = AddressOf Me.OnCheckRackIsEmptyOperationCompleted
            End If
            Me.InvokeAsync("CheckRackIsEmpty", New Object() {_rackCd, loginId}, Me.CheckRackIsEmptyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckRackIsEmptyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckRackIsEmptyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckRackIsEmptyCompleted(Me, New CheckRackIsEmptyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNextCusId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextCusId(ByVal LoginId As String) As String
            Dim results() As Object = Me.Invoke("GetNextCusId", New Object() {LoginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextCusIdAsync(ByVal LoginId As String)
            Me.GetNextCusIdAsync(LoginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextCusIdAsync(ByVal LoginId As String, ByVal userState As Object)
            If (Me.GetNextCusIdOperationCompleted Is Nothing) Then
                Me.GetNextCusIdOperationCompleted = AddressOf Me.OnGetNextCusIdOperationCompleted
            End If
            Me.InvokeAsync("GetNextCusId", New Object() {LoginId}, Me.GetNextCusIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextCusIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextCusIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextCusIdCompleted(Me, New GetNextCusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCustomerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertCustomerInfo(ByVal cusId As String, ByVal cusNm As String, ByVal dest As Integer, ByVal address As String, ByVal telNo As String, ByVal faxNo As String, ByVal mail As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertCustomerInfo", New Object() {cusId, cusNm, dest, address, telNo, faxNo, mail, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertCustomerInfoAsync(ByVal cusId As String, ByVal cusNm As String, ByVal dest As Integer, ByVal address As String, ByVal telNo As String, ByVal faxNo As String, ByVal mail As String, ByVal loginId As String)
            Me.InsertCustomerInfoAsync(cusId, cusNm, dest, address, telNo, faxNo, mail, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertCustomerInfoAsync(ByVal cusId As String, ByVal cusNm As String, ByVal dest As Integer, ByVal address As String, ByVal telNo As String, ByVal faxNo As String, ByVal mail As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertCustomerInfoOperationCompleted Is Nothing) Then
                Me.InsertCustomerInfoOperationCompleted = AddressOf Me.OnInsertCustomerInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertCustomerInfo", New Object() {cusId, cusNm, dest, address, telNo, faxNo, mail, loginId}, Me.InsertCustomerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertCustomerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertCustomerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertCustomerInfoCompleted(Me, New InsertCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerInfoByID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerInfoByID(ByVal cusId As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerInfoByID", New Object() {cusId, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerInfoByIDAsync(ByVal cusId As String, ByVal loginId As String)
            Me.GetCustomerInfoByIDAsync(cusId, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerInfoByIDAsync(ByVal cusId As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetCustomerInfoByIDOperationCompleted Is Nothing) Then
                Me.GetCustomerInfoByIDOperationCompleted = AddressOf Me.OnGetCustomerInfoByIDOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerInfoByID", New Object() {cusId, loginId}, Me.GetCustomerInfoByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerInfoByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerInfoByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerInfoByIDCompleted(Me, New GetCustomerInfoByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCustomerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCustomerInfo(ByVal cusId As String, ByVal cusName As String, ByVal address As String, ByVal dest As Integer, ByVal email As String, ByVal faxNo As String, ByVal telNo As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateCustomerInfo", New Object() {cusId, cusName, address, dest, email, faxNo, telNo, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerInfoAsync(ByVal cusId As String, ByVal cusName As String, ByVal address As String, ByVal dest As Integer, ByVal email As String, ByVal faxNo As String, ByVal telNo As String, ByVal loginId As String)
            Me.UpdateCustomerInfoAsync(cusId, cusName, address, dest, email, faxNo, telNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerInfoAsync(ByVal cusId As String, ByVal cusName As String, ByVal address As String, ByVal dest As Integer, ByVal email As String, ByVal faxNo As String, ByVal telNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateCustomerInfoOperationCompleted Is Nothing) Then
                Me.UpdateCustomerInfoOperationCompleted = AddressOf Me.OnUpdateCustomerInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateCustomerInfo", New Object() {cusId, cusName, address, dest, email, faxNo, telNo, loginId}, Me.UpdateCustomerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCustomerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCustomerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCustomerInfoCompleted(Me, New UpdateCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCustomerInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCustomerInfo(ByVal cusId As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteCustomerInfo", New Object() {cusId, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomerInfoAsync(ByVal cusId As String, ByVal loginId As String)
            Me.DeleteCustomerInfoAsync(cusId, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCustomerInfoAsync(ByVal cusId As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.DeleteCustomerInfoOperationCompleted Is Nothing) Then
                Me.DeleteCustomerInfoOperationCompleted = AddressOf Me.OnDeleteCustomerInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteCustomerInfo", New Object() {cusId, loginId}, Me.DeleteCustomerInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCustomerInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCustomerInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCustomerInfoCompleted(Me, New DeleteCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CustomerInquiry(ByVal cusId As String, ByVal cusName As String, ByVal telNo As String, ByVal address As String, ByVal email As String, ByVal dest As Integer, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CustomerInquiry", New Object() {cusId, cusName, telNo, address, email, dest, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CustomerInquiryAsync(ByVal cusId As String, ByVal cusName As String, ByVal telNo As String, ByVal address As String, ByVal email As String, ByVal dest As Integer, ByVal loginId As String)
            Me.CustomerInquiryAsync(cusId, cusName, telNo, address, email, dest, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CustomerInquiryAsync(ByVal cusId As String, ByVal cusName As String, ByVal telNo As String, ByVal address As String, ByVal email As String, ByVal dest As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.CustomerInquiryOperationCompleted Is Nothing) Then
                Me.CustomerInquiryOperationCompleted = AddressOf Me.OnCustomerInquiryOperationCompleted
            End If
            Me.InvokeAsync("CustomerInquiry", New Object() {cusId, cusName, telNo, address, email, dest, loginId}, Me.CustomerInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnCustomerInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.CustomerInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CustomerInquiryCompleted(Me, New CustomerInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStocktFGkReqDateExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStocktFGkReqDateExist(ByVal stkReqDate As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStocktFGkReqDateExist", New Object() {stkReqDate, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStocktFGkReqDateExistAsync(ByVal stkReqDate As String, ByVal userId As String)
            Me.ChkStocktFGkReqDateExistAsync(stkReqDate, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStocktFGkReqDateExistAsync(ByVal stkReqDate As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStocktFGkReqDateExistOperationCompleted Is Nothing) Then
                Me.ChkStocktFGkReqDateExistOperationCompleted = AddressOf Me.OnChkStocktFGkReqDateExistOperationCompleted
            End If
            Me.InvokeAsync("ChkStocktFGkReqDateExist", New Object() {stkReqDate, userId}, Me.ChkStocktFGkReqDateExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStocktFGkReqDateExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStocktFGkReqDateExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStocktFGkReqDateExistCompleted(Me, New ChkStocktFGkReqDateExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStockFGRackNoExistProcess", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStockFGRackNoExistProcess(ByVal rackNo As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStockFGRackNoExistProcess", New Object() {rackNo, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStockFGRackNoExistProcessAsync(ByVal rackNo As String, ByVal userId As String)
            Me.ChkStockFGRackNoExistProcessAsync(rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStockFGRackNoExistProcessAsync(ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStockFGRackNoExistProcessOperationCompleted Is Nothing) Then
                Me.ChkStockFGRackNoExistProcessOperationCompleted = AddressOf Me.OnChkStockFGRackNoExistProcessOperationCompleted
            End If
            Me.InvokeAsync("ChkStockFGRackNoExistProcess", New Object() {rackNo, userId}, Me.ChkStockFGRackNoExistProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStockFGRackNoExistProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStockFGRackNoExistProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStockFGRackNoExistProcessCompleted(Me, New ChkStockFGRackNoExistProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStockFGValidBarcode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStockFGValidBarcode(ByVal barcode As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStockFGValidBarcode", New Object() {barcode, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStockFGValidBarcodeAsync(ByVal barcode As String, ByVal userId As String)
            Me.ChkStockFGValidBarcodeAsync(barcode, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStockFGValidBarcodeAsync(ByVal barcode As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStockFGValidBarcodeOperationCompleted Is Nothing) Then
                Me.ChkStockFGValidBarcodeOperationCompleted = AddressOf Me.OnChkStockFGValidBarcodeOperationCompleted
            End If
            Me.InvokeAsync("ChkStockFGValidBarcode", New Object() {barcode, userId}, Me.ChkStockFGValidBarcodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStockFGValidBarcodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStockFGValidBarcodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStockFGValidBarcodeCompleted(Me, New ChkStockFGValidBarcodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StocktakingBarcodeFG", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StocktakingBarcodeFG(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String) As Boolean
            Dim results() As Object = Me.Invoke("StocktakingBarcodeFG", New Object() {barcodeNo, userId, rackNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StocktakingBarcodeFGAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String)
            Me.StocktakingBarcodeFGAsync(barcodeNo, userId, rackNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StocktakingBarcodeFGAsync(ByVal barcodeNo As String, ByVal userId As String, ByVal rackNo As String, ByVal userState As Object)
            If (Me.StocktakingBarcodeFGOperationCompleted Is Nothing) Then
                Me.StocktakingBarcodeFGOperationCompleted = AddressOf Me.OnStocktakingBarcodeFGOperationCompleted
            End If
            Me.InvokeAsync("StocktakingBarcodeFG", New Object() {barcodeNo, userId, rackNo}, Me.StocktakingBarcodeFGOperationCompleted, userState)
        End Sub
        
        Private Sub OnStocktakingBarcodeFGOperationCompleted(ByVal arg As Object)
            If (Not (Me.StocktakingBarcodeFGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StocktakingBarcodeFGCompleted(Me, New StocktakingBarcodeFGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemInfoByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemInfoByCd(ByVal itemCode As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemInfoByCd", New Object() {itemCode, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemInfoByCdAsync(ByVal itemCode As String, ByVal loginId As String)
            Me.GetItemInfoByCdAsync(itemCode, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemInfoByCdAsync(ByVal itemCode As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetItemInfoByCdOperationCompleted Is Nothing) Then
                Me.GetItemInfoByCdOperationCompleted = AddressOf Me.OnGetItemInfoByCdOperationCompleted
            End If
            Me.InvokeAsync("GetItemInfoByCd", New Object() {itemCode, loginId}, Me.GetItemInfoByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemInfoByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemInfoByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemInfoByCdCompleted(Me, New GetItemInfoByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertItemInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertItemInfo(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As Integer, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertItemInfo", New Object() {itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertItemInfoAsync(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As Integer, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginId As String)
            Me.InsertItemInfoAsync(itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertItemInfoAsync(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As Integer, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertItemInfoOperationCompleted Is Nothing) Then
                Me.InsertItemInfoOperationCompleted = AddressOf Me.OnInsertItemInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertItemInfo", New Object() {itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginId}, Me.InsertItemInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertItemInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertItemInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertItemInfoCompleted(Me, New InsertItemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItemInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateItemInfo(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As String, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateItemInfo", New Object() {itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateItemInfoAsync(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As String, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginCode As String)
            Me.UpdateItemInfoAsync(itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateItemInfoAsync(ByVal itemCode As String, ByVal itemName As String, ByVal quantity As String, ByVal unit As Integer, ByVal temp As Integer, ByVal orotexNo As String, ByVal path01 As String, ByVal path02 As String, ByVal path03 As String, ByVal path04 As String, ByVal path05 As String, ByVal customerList() As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.UpdateItemInfoOperationCompleted Is Nothing) Then
                Me.UpdateItemInfoOperationCompleted = AddressOf Me.OnUpdateItemInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateItemInfo", New Object() {itemCode, itemName, quantity, unit, temp, orotexNo, path01, path02, path03, path04, path05, customerList, loginCode}, Me.UpdateItemInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateItemInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateItemInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateItemInfoCompleted(Me, New UpdateItemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteItemInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteItemInfo(ByVal itemCode As String, ByVal loginCode As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteItemInfo", New Object() {itemCode, loginCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteItemInfoAsync(ByVal itemCode As String, ByVal loginCode As String)
            Me.DeleteItemInfoAsync(itemCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteItemInfoAsync(ByVal itemCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.DeleteItemInfoOperationCompleted Is Nothing) Then
                Me.DeleteItemInfoOperationCompleted = AddressOf Me.OnDeleteItemInfoOperationCompleted
            End If
            Me.InvokeAsync("DeleteItemInfo", New Object() {itemCode, loginCode}, Me.DeleteItemInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteItemInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteItemInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteItemInfoCompleted(Me, New DeleteItemInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ItemInquiry", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ItemInquiry(ByVal itemCodeFrom As String, ByVal itemCodeTo As String, ByVal itemName As String, ByVal customerCode As String, ByVal customerName As String, ByVal quantity As Integer, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ItemInquiry", New Object() {itemCodeFrom, itemCodeTo, itemName, customerCode, customerName, quantity, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ItemInquiryAsync(ByVal itemCodeFrom As String, ByVal itemCodeTo As String, ByVal itemName As String, ByVal customerCode As String, ByVal customerName As String, ByVal quantity As Integer, ByVal loginCode As String)
            Me.ItemInquiryAsync(itemCodeFrom, itemCodeTo, itemName, customerCode, customerName, quantity, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ItemInquiryAsync(ByVal itemCodeFrom As String, ByVal itemCodeTo As String, ByVal itemName As String, ByVal customerCode As String, ByVal customerName As String, ByVal quantity As Integer, ByVal loginCode As String, ByVal userState As Object)
            If (Me.ItemInquiryOperationCompleted Is Nothing) Then
                Me.ItemInquiryOperationCompleted = AddressOf Me.OnItemInquiryOperationCompleted
            End If
            Me.InvokeAsync("ItemInquiry", New Object() {itemCodeFrom, itemCodeTo, itemName, customerCode, customerName, quantity, loginCode}, Me.ItemInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnItemInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ItemInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ItemInquiryCompleted(Me, New ItemInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductInfoByItemCode", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProductInfoByItemCode(ByVal itemCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetProductInfoByItemCode", New Object() {itemCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProductInfoByItemCodeAsync(ByVal itemCode As String, ByVal loginCode As String)
            Me.GetProductInfoByItemCodeAsync(itemCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProductInfoByItemCodeAsync(ByVal itemCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetProductInfoByItemCodeOperationCompleted Is Nothing) Then
                Me.GetProductInfoByItemCodeOperationCompleted = AddressOf Me.OnGetProductInfoByItemCodeOperationCompleted
            End If
            Me.InvokeAsync("GetProductInfoByItemCode", New Object() {itemCode, loginCode}, Me.GetProductInfoByItemCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProductInfoByItemCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProductInfoByItemCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProductInfoByItemCodeCompleted(Me, New GetProductInfoByItemCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemCustomerInfoByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemCustomerInfoByCd(ByVal itemCode As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemCustomerInfoByCd", New Object() {itemCode, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemCustomerInfoByCdAsync(ByVal itemCode As String, ByVal loginCode As String)
            Me.GetItemCustomerInfoByCdAsync(itemCode, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemCustomerInfoByCdAsync(ByVal itemCode As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetItemCustomerInfoByCdOperationCompleted Is Nothing) Then
                Me.GetItemCustomerInfoByCdOperationCompleted = AddressOf Me.OnGetItemCustomerInfoByCdOperationCompleted
            End If
            Me.InvokeAsync("GetItemCustomerInfoByCd", New Object() {itemCode, loginCode}, Me.GetItemCustomerInfoByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemCustomerInfoByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemCustomerInfoByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemCustomerInfoByCdCompleted(Me, New GetItemCustomerInfoByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemDetailInfoByBCFromTo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItemDetailInfoByBCFromTo(ByVal barcodeFrom As String, ByVal barcodeTo As String, ByVal loginCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetItemDetailInfoByBCFromTo", New Object() {barcodeFrom, barcodeTo, loginCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailInfoByBCFromToAsync(ByVal barcodeFrom As String, ByVal barcodeTo As String, ByVal loginCode As String)
            Me.GetItemDetailInfoByBCFromToAsync(barcodeFrom, barcodeTo, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemDetailInfoByBCFromToAsync(ByVal barcodeFrom As String, ByVal barcodeTo As String, ByVal loginCode As String, ByVal userState As Object)
            If (Me.GetItemDetailInfoByBCFromToOperationCompleted Is Nothing) Then
                Me.GetItemDetailInfoByBCFromToOperationCompleted = AddressOf Me.OnGetItemDetailInfoByBCFromToOperationCompleted
            End If
            Me.InvokeAsync("GetItemDetailInfoByBCFromTo", New Object() {barcodeFrom, barcodeTo, loginCode}, Me.GetItemDetailInfoByBCFromToOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemDetailInfoByBCFromToOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemDetailInfoByBCFromToCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemDetailInfoByBCFromToCompleted(Me, New GetItemDetailInfoByBCFromToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentBoxNumber", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentBoxNumber(ByVal itemCode As String, ByVal userId As String) As String
            Dim results() As Object = Me.Invoke("GetCurrentBoxNumber", New Object() {itemCode, userId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentBoxNumberAsync(ByVal itemCode As String, ByVal userId As String)
            Me.GetCurrentBoxNumberAsync(itemCode, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentBoxNumberAsync(ByVal itemCode As String, ByVal userId As String, ByVal userState As Object)
            If (Me.GetCurrentBoxNumberOperationCompleted Is Nothing) Then
                Me.GetCurrentBoxNumberOperationCompleted = AddressOf Me.OnGetCurrentBoxNumberOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentBoxNumber", New Object() {itemCode, userId}, Me.GetCurrentBoxNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentBoxNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentBoxNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentBoxNumberCompleted(Me, New GetCurrentBoxNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCurrentBoxNumber", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCurrentBoxNumber(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("UpdateCurrentBoxNumber", New Object() {itemCode, curBoxNum, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrentBoxNumberAsync(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String)
            Me.UpdateCurrentBoxNumberAsync(itemCode, curBoxNum, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrentBoxNumberAsync(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateCurrentBoxNumberOperationCompleted Is Nothing) Then
                Me.UpdateCurrentBoxNumberOperationCompleted = AddressOf Me.OnUpdateCurrentBoxNumberOperationCompleted
            End If
            Me.InvokeAsync("UpdateCurrentBoxNumber", New Object() {itemCode, curBoxNum, loginId}, Me.UpdateCurrentBoxNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCurrentBoxNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCurrentBoxNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCurrentBoxNumberCompleted(Me, New UpdateCurrentBoxNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCurrentBoxNumberToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCurrentBoxNumberToString(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("UpdateCurrentBoxNumberToString", New Object() {itemCode, curBoxNum, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrentBoxNumberToStringAsync(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String)
            Me.UpdateCurrentBoxNumberToStringAsync(itemCode, curBoxNum, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCurrentBoxNumberToStringAsync(ByVal itemCode As String, ByVal curBoxNum As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.UpdateCurrentBoxNumberToStringOperationCompleted Is Nothing) Then
                Me.UpdateCurrentBoxNumberToStringOperationCompleted = AddressOf Me.OnUpdateCurrentBoxNumberToStringOperationCompleted
            End If
            Me.InvokeAsync("UpdateCurrentBoxNumberToString", New Object() {itemCode, curBoxNum, loginId}, Me.UpdateCurrentBoxNumberToStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCurrentBoxNumberToStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCurrentBoxNumberToStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCurrentBoxNumberToStringCompleted(Me, New UpdateCurrentBoxNumberToStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseHistTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseHistTr(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal stockDateFrom As String, ByVal stockDateTo As String, ByVal statusFlg As Integer, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseHistTr", New Object() {barcodeNo, warehouseCd, itemCd, stockDateFrom, stockDateTo, statusFlg, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseHistTrAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal stockDateFrom As String, ByVal stockDateTo As String, ByVal statusFlg As Integer, ByVal loginId As String)
            Me.GetWarehouseHistTrAsync(barcodeNo, warehouseCd, itemCd, stockDateFrom, stockDateTo, statusFlg, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseHistTrAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal stockDateFrom As String, ByVal stockDateTo As String, ByVal statusFlg As Integer, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseHistTrOperationCompleted Is Nothing) Then
                Me.GetWarehouseHistTrOperationCompleted = AddressOf Me.OnGetWarehouseHistTrOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseHistTr", New Object() {barcodeNo, warehouseCd, itemCd, stockDateFrom, stockDateTo, statusFlg, loginId}, Me.GetWarehouseHistTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseHistTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseHistTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseHistTrCompleted(Me, New GetWarehouseHistTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWarehouseHistTrInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertWarehouseHistTrInfo(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertWarehouseHistTrInfo", New Object() {barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseHistTrInfoAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String)
            Me.InsertWarehouseHistTrInfoAsync(barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseHistTrInfoAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertWarehouseHistTrInfoOperationCompleted Is Nothing) Then
                Me.InsertWarehouseHistTrInfoOperationCompleted = AddressOf Me.OnInsertWarehouseHistTrInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertWarehouseHistTrInfo", New Object() {barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId}, Me.InsertWarehouseHistTrInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertWarehouseHistTrInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertWarehouseHistTrInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertWarehouseHistTrInfoCompleted(Me, New InsertWarehouseHistTrInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertWarehouseHistTrInfoToString", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertWarehouseHistTrInfoToString(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String) As String
            Dim results() As Object = Me.Invoke("InsertWarehouseHistTrInfoToString", New Object() {barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseHistTrInfoToStringAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String)
            Me.InsertWarehouseHistTrInfoToStringAsync(barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertWarehouseHistTrInfoToStringAsync(ByVal barcodeNo As String, ByVal warehouseCd As String, ByVal itemCd As String, ByVal statusFlg As Integer, ByVal rackCd As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertWarehouseHistTrInfoToStringOperationCompleted Is Nothing) Then
                Me.InsertWarehouseHistTrInfoToStringOperationCompleted = AddressOf Me.OnInsertWarehouseHistTrInfoToStringOperationCompleted
            End If
            Me.InvokeAsync("InsertWarehouseHistTrInfoToString", New Object() {barcodeNo, warehouseCd, itemCd, statusFlg, rackCd, loginId}, Me.InsertWarehouseHistTrInfoToStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertWarehouseHistTrInfoToStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertWarehouseHistTrInfoToStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertWarehouseHistTrInfoToStringCompleted(Me, New InsertWarehouseHistTrInfoToStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShipmentReqDetailByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipmentReqDetailByCd(ByVal shipmentReqNo As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipmentReqDetailByCd", New Object() {shipmentReqNo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipmentReqDetailByCdAsync(ByVal shipmentReqNo As String, ByVal loginId As String)
            Me.GetShipmentReqDetailByCdAsync(shipmentReqNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipmentReqDetailByCdAsync(ByVal shipmentReqNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetShipmentReqDetailByCdOperationCompleted Is Nothing) Then
                Me.GetShipmentReqDetailByCdOperationCompleted = AddressOf Me.OnGetShipmentReqDetailByCdOperationCompleted
            End If
            Me.InvokeAsync("GetShipmentReqDetailByCd", New Object() {shipmentReqNo, loginId}, Me.GetShipmentReqDetailByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipmentReqDetailByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipmentReqDetailByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipmentReqDetailByCdCompleted(Me, New GetShipmentReqDetailByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteShipmentReqDtlInfoTrByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteShipmentReqDtlInfoTrByCd(ByVal shipReqNo As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("DeleteShipmentReqDtlInfoTrByCd", New Object() {shipReqNo, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteShipmentReqDtlInfoTrByCdAsync(ByVal shipReqNo As String, ByVal loginId As String)
            Me.DeleteShipmentReqDtlInfoTrByCdAsync(shipReqNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteShipmentReqDtlInfoTrByCdAsync(ByVal shipReqNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.DeleteShipmentReqDtlInfoTrByCdOperationCompleted Is Nothing) Then
                Me.DeleteShipmentReqDtlInfoTrByCdOperationCompleted = AddressOf Me.OnDeleteShipmentReqDtlInfoTrByCdOperationCompleted
            End If
            Me.InvokeAsync("DeleteShipmentReqDtlInfoTrByCd", New Object() {shipReqNo, loginId}, Me.DeleteShipmentReqDtlInfoTrByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteShipmentReqDtlInfoTrByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteShipmentReqDtlInfoTrByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteShipmentReqDtlInfoTrByCdCompleted(Me, New DeleteShipmentReqDtlInfoTrByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertShipmentReqDtlInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertShipmentReqDtlInfoTr(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal scanFlag As Integer, ByVal loginCode As String) As String
            Dim results() As Object = Me.Invoke("InsertShipmentReqDtlInfoTr", New Object() {shipReqNo, barcodeNo, palletNo, scanFlag, loginCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertShipmentReqDtlInfoTrAsync(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal scanFlag As Integer, ByVal loginCode As String)
            Me.InsertShipmentReqDtlInfoTrAsync(shipReqNo, barcodeNo, palletNo, scanFlag, loginCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertShipmentReqDtlInfoTrAsync(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal scanFlag As Integer, ByVal loginCode As String, ByVal userState As Object)
            If (Me.InsertShipmentReqDtlInfoTrOperationCompleted Is Nothing) Then
                Me.InsertShipmentReqDtlInfoTrOperationCompleted = AddressOf Me.OnInsertShipmentReqDtlInfoTrOperationCompleted
            End If
            Me.InvokeAsync("InsertShipmentReqDtlInfoTr", New Object() {shipReqNo, barcodeNo, palletNo, scanFlag, loginCode}, Me.InsertShipmentReqDtlInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertShipmentReqDtlInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertShipmentReqDtlInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertShipmentReqDtlInfoTrCompleted(Me, New InsertShipmentReqDtlInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetShipmentActDetailByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipmentActDetailByCd(ByVal shipmentReqNo As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetShipmentActDetailByCd", New Object() {shipmentReqNo, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipmentActDetailByCdAsync(ByVal shipmentReqNo As String, ByVal loginId As String)
            Me.GetShipmentActDetailByCdAsync(shipmentReqNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipmentActDetailByCdAsync(ByVal shipmentReqNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetShipmentActDetailByCdOperationCompleted Is Nothing) Then
                Me.GetShipmentActDetailByCdOperationCompleted = AddressOf Me.OnGetShipmentActDetailByCdOperationCompleted
            End If
            Me.InvokeAsync("GetShipmentActDetailByCd", New Object() {shipmentReqNo, loginId}, Me.GetShipmentActDetailByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipmentActDetailByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipmentActDetailByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipmentActDetailByCdCompleted(Me, New GetShipmentActDetailByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvaiableBarcodeByItemCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvaiableBarcodeByItemCd(ByVal itemCode As String, ByVal loginCode As String, ByVal barcode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAvaiableBarcodeByItemCd", New Object() {itemCode, loginCode, barcode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvaiableBarcodeByItemCdAsync(ByVal itemCode As String, ByVal loginCode As String, ByVal barcode As String)
            Me.GetAvaiableBarcodeByItemCdAsync(itemCode, loginCode, barcode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvaiableBarcodeByItemCdAsync(ByVal itemCode As String, ByVal loginCode As String, ByVal barcode As String, ByVal userState As Object)
            If (Me.GetAvaiableBarcodeByItemCdOperationCompleted Is Nothing) Then
                Me.GetAvaiableBarcodeByItemCdOperationCompleted = AddressOf Me.OnGetAvaiableBarcodeByItemCdOperationCompleted
            End If
            Me.InvokeAsync("GetAvaiableBarcodeByItemCd", New Object() {itemCode, loginCode, barcode}, Me.GetAvaiableBarcodeByItemCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvaiableBarcodeByItemCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvaiableBarcodeByItemCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvaiableBarcodeByItemCdCompleted(Me, New GetAvaiableBarcodeByItemCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertShipmentActDtlInfoTr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertShipmentActDtlInfoTr(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertShipmentActDtlInfoTr", New Object() {shipReqNo, barcodeNo, palletNo, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertShipmentActDtlInfoTrAsync(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal loginId As String)
            Me.InsertShipmentActDtlInfoTrAsync(shipReqNo, barcodeNo, palletNo, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertShipmentActDtlInfoTrAsync(ByVal shipReqNo As String, ByVal barcodeNo As String, ByVal palletNo As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertShipmentActDtlInfoTrOperationCompleted Is Nothing) Then
                Me.InsertShipmentActDtlInfoTrOperationCompleted = AddressOf Me.OnInsertShipmentActDtlInfoTrOperationCompleted
            End If
            Me.InvokeAsync("InsertShipmentActDtlInfoTr", New Object() {shipReqNo, barcodeNo, palletNo, loginId}, Me.InsertShipmentActDtlInfoTrOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertShipmentActDtlInfoTrOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertShipmentActDtlInfoTrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertShipmentActDtlInfoTrCompleted(Me, New InsertShipmentActDtlInfoTrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChkStkDelBarcodeExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkStkDelBarcodeExist(ByVal barcodeNo As String, ByVal whCd As String, ByVal userId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ChkStkDelBarcodeExist", New Object() {barcodeNo, whCd, userId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkStkDelBarcodeExistAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal userId As String)
            Me.ChkStkDelBarcodeExistAsync(barcodeNo, whCd, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkStkDelBarcodeExistAsync(ByVal barcodeNo As String, ByVal whCd As String, ByVal userId As String, ByVal userState As Object)
            If (Me.ChkStkDelBarcodeExistOperationCompleted Is Nothing) Then
                Me.ChkStkDelBarcodeExistOperationCompleted = AddressOf Me.OnChkStkDelBarcodeExistOperationCompleted
            End If
            Me.InvokeAsync("ChkStkDelBarcodeExist", New Object() {barcodeNo, whCd, userId}, Me.ChkStkDelBarcodeExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkStkDelBarcodeExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkStkDelBarcodeExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkStkDelBarcodeExistCompleted(Me, New ChkStkDelBarcodeExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StockDeleteW900", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockDeleteW900(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("StockDeleteW900", New Object() {barcodeNo, itemCode, rackNo, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockDeleteW900Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String)
            Me.StockDeleteW900Async(barcodeNo, itemCode, rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockDeleteW900Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.StockDeleteW900OperationCompleted Is Nothing) Then
                Me.StockDeleteW900OperationCompleted = AddressOf Me.OnStockDeleteW900OperationCompleted
            End If
            Me.InvokeAsync("StockDeleteW900", New Object() {barcodeNo, itemCode, rackNo, userId}, Me.StockDeleteW900OperationCompleted, userState)
        End Sub
        
        Private Sub OnStockDeleteW900OperationCompleted(ByVal arg As Object)
            If (Not (Me.StockDeleteW900CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockDeleteW900Completed(Me, New StockDeleteW900CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StockDeleteW830", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StockDeleteW830(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String) As Boolean
            Dim results() As Object = Me.Invoke("StockDeleteW830", New Object() {barcodeNo, itemCode, rackNo, userId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StockDeleteW830Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String)
            Me.StockDeleteW830Async(barcodeNo, itemCode, rackNo, userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StockDeleteW830Async(ByVal barcodeNo As String, ByVal itemCode As String, ByVal rackNo As String, ByVal userId As String, ByVal userState As Object)
            If (Me.StockDeleteW830OperationCompleted Is Nothing) Then
                Me.StockDeleteW830OperationCompleted = AddressOf Me.OnStockDeleteW830OperationCompleted
            End If
            Me.InvokeAsync("StockDeleteW830", New Object() {barcodeNo, itemCode, rackNo, userId}, Me.StockDeleteW830OperationCompleted, userState)
        End Sub
        
        Private Sub OnStockDeleteW830OperationCompleted(ByVal arg As Object)
            If (Not (Me.StockDeleteW830CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StockDeleteW830Completed(Me, New StockDeleteW830CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWarehouseInfoByCd", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarehouseInfoByCd(ByVal whCode As String, ByVal loginId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWarehouseInfoByCd", New Object() {whCode, loginId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseInfoByCdAsync(ByVal whCode As String, ByVal loginId As String)
            Me.GetWarehouseInfoByCdAsync(whCode, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarehouseInfoByCdAsync(ByVal whCode As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.GetWarehouseInfoByCdOperationCompleted Is Nothing) Then
                Me.GetWarehouseInfoByCdOperationCompleted = AddressOf Me.OnGetWarehouseInfoByCdOperationCompleted
            End If
            Me.InvokeAsync("GetWarehouseInfoByCd", New Object() {whCode, loginId}, Me.GetWarehouseInfoByCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarehouseInfoByCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarehouseInfoByCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarehouseInfoByCdCompleted(Me, New GetWarehouseInfoByCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertItemDtlInfo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertItemDtlInfo(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String) As Integer
            Dim results() As Object = Me.Invoke("InsertItemDtlInfo", New Object() {itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertItemDtlInfoAsync(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String)
            Me.InsertItemDtlInfoAsync(itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertItemDtlInfoAsync(ByVal itemCode As String, ByVal boxNumber As String, ByVal barcodeNo As String, ByVal qty As String, ByVal lotNo As String, ByVal woNo As String, ByVal woDate As String, ByVal loginId As String, ByVal userState As Object)
            If (Me.InsertItemDtlInfoOperationCompleted Is Nothing) Then
                Me.InsertItemDtlInfoOperationCompleted = AddressOf Me.OnInsertItemDtlInfoOperationCompleted
            End If
            Me.InvokeAsync("InsertItemDtlInfo", New Object() {itemCode, boxNumber, barcodeNo, qty, lotNo, woNo, woDate, loginId}, Me.InsertItemDtlInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertItemDtlInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertItemDtlInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertItemDtlInfoCompleted(Me, New InsertItemDtlInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertItemDtlInfoToStringCompletedEventHandler(ByVal sender As Object, ByVal e As InsertItemDtlInfoToStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertItemDtlInfoToStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetNewBoxListCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewBoxListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewBoxListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetShipmentInfoByShipmentReqNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipmentInfoByShipmentReqNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipmentInfoByShipmentReqNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetShipmentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipmentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipmentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteShipmentReqInfoTrByCdCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteShipmentReqInfoTrByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteShipmentReqInfoTrByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertShipReqInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As InsertShipReqInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertShipReqInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertShipReqInfoTrWithDetailCompletedEventHandler(ByVal sender As Object, ByVal e As InsertShipReqInfoTrWithDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertShipReqInfoTrWithDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateShipReqInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateShipReqInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateShipReqInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateShipReqInfoTrWithDetailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateShipReqInfoTrWithDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateShipReqInfoTrWithDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub SetShipReqInfoTrCompleteCompletedEventHandler(ByVal sender As Object, ByVal e As SetShipReqInfoTrCompleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetShipReqInfoTrCompleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ShipmentInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As ShipmentInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShipmentInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ExecuteShipmentCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteShipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteShipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateItemDtlInfoShipFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemDtlInfoShipFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemDtlInfoShipFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseTrByBarcodeNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseTrByBarcodeNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseTrByBarcodeNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseTrByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseTrByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseTrByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub WarehouseTrInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As WarehouseTrInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WarehouseTrInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteWarehouseTrByBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteWarehouseTrByBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteWarehouseTrByBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertWarehouseTrInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertWarehouseTrInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertWarehouseTrInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertWarehouseTrInfoToStringCompletedEventHandler(ByVal sender As Object, ByVal e As InsertWarehouseTrInfoToStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertWarehouseTrInfoToStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckBarcodeExportExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcodeExportExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcodeExportExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ExportBarcodeIntoMoldCompletedEventHandler(ByVal sender As Object, ByVal e As ExportBarcodeIntoMoldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExportBarcodeIntoMoldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWhInfoTrListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWhInfoTrListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWhInfoTrListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetStockReqInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As GetStockReqInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStockReqInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetStockReqDtlInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As GetStockReqDtlInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStockReqDtlInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetStockResultDtlInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As GetStockResultDtlInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStockResultDtlInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertStockReqDtlInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As InsertStockReqDtlInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertStockReqDtlInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckStocktakingIsEmptyCompletedEventHandler(ByVal sender As Object, ByVal e As CheckStocktakingIsEmptyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckStocktakingIsEmptyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetCodeMasterMSCompletedEventHandler(ByVal sender As Object, ByVal e As GetCodeMasterMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCodeMasterMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetUnitByCode2CompletedEventHandler(ByVal sender As Object, ByVal e As GetUnitByCode2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnitByCode2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ProductInfoInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As ProductInfoInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProductInfoInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailByItemCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailByItemCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailByItemCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ImproveScreenProductInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As ImproveScreenProductInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImproveScreenProductInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetDataProductInfoInquiryWithModeNewCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataProductInfoInquiryWithModeNewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataProductInfoInquiryWithModeNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertScreenProductInfoInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As InsertScreenProductInfoInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertScreenProductInfoInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailByWorkOrderNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailByWorkOrderNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailByWorkOrderNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailByBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailByBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailByBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateItemDetailByBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemDetailByBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemDetailByBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetListBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetListBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateItemDetailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailByWorkNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailByWorkNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailByWorkNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailByWorkNoOrderBarcodeAscCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailByWorkNoOrderBarcodeAscCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailByWorkNoOrderBarcodeAscCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateQuantityInBoxByBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateQuantityInBoxByBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateQuantityInBoxByBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetPrintBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrintBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrintBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetShipmentInquiryByInvoiceNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipmentInquiryByInvoiceNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipmentInquiryByInvoiceNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckDataIsValidToReturnW900CompletedEventHandler(ByVal sender As Object, ByVal e As CheckDataIsValidToReturnW900CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckDataIsValidToReturnW900CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub IsExistW900OrW830CompletedEventHandler(ByVal sender As Object, ByVal e As IsExistW900OrW830CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsExistW900OrW830CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetInfoOddBoxByItemCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoOddBoxByItemCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoOddBoxByItemCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateOddToEvenBoxCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOddToEvenBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOddToEvenBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub PrintNewLabelCompletedEventHandler(ByVal sender As Object, ByVal e As PrintNewLabelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintNewLabelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ImportWarehouseOfflineCompletedEventHandler(ByVal sender As Object, ByVal e As ImportWarehouseOfflineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportWarehouseOfflineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetReasonByCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetReasonByCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReasonByCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertReasonCompletedEventHandler(ByVal sender As Object, ByVal e As InsertReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateReasonCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteReasonCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ReasonInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As ReasonInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReasonInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetEventsLoginDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventsLoginDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventsLoginDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetDataInUserMasterMSCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataInUserMasterMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataInUserMasterMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetUserInfoProccessCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoProccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoProccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UserInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As UserInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseStatusTrCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseStatusTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseStatusTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChangeUserPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUserPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUserPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetUserInfoByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWOInfoByWONoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWOInfoByWONoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWOInfoByWONoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWOInfoByWONoJoinItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetWOInfoByWONoJoinItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWOInfoByWONoJoinItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertWOInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertWOInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertWOInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWOInfoListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWOInfoListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWOInfoListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateWOInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWOInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWOInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteWOInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteWOInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteWOInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateIssueFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIssueFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIssueFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateIssueFlagToStringCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIssueFlagToStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIssueFlagToStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkRackNoExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As ChkRackNoExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkRackNoExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkBarcodeExistSelectedRackCompletedEventHandler(ByVal sender As Object, ByVal e As ChkBarcodeExistSelectedRackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkBarcodeExistSelectedRackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub SetRackToW830CompletedEventHandler(ByVal sender As Object, ByVal e As SetRackToW830CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetRackToW830CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckBarcodeExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcodeExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcodeExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ImportBarcodeIntoQCCompletedEventHandler(ByVal sender As Object, ByVal e As ImportBarcodeIntoQCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportBarcodeIntoQCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStkMvRackNoExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStkMvRackNoExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStkMvRackNoExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStkMvBarcodeExistDestRackNoCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStkMvBarcodeExistDestRackNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStkMvBarcodeExistDestRackNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub StockMoveW830CompletedEventHandler(ByVal sender As Object, ByVal e As StockMoveW830CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockMoveW830CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckRejectBarcodeExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRejectBarcodeExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRejectBarcodeExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub RejectBarcodeIntoW9902CompletedEventHandler(ByVal sender As Object, ByVal e As RejectBarcodeIntoW9902CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RejectBarcodeIntoW9902CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckRetrieveRackCDExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRetrieveRackCDExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRetrieveRackCDExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckRetrieveBarcodeExistSelectedRackCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRetrieveBarcodeExistSelectedRackCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRetrieveBarcodeExistSelectedRackCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub RetrieveBarcodeIntoQCCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveBarcodeIntoQCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveBarcodeIntoQCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStocktkReqDateExistCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStocktkReqDateExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStocktkReqDateExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStocktkBarcodeExistSelectedReqDateCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStocktkBarcodeExistSelectedReqDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStocktkBarcodeExistSelectedReqDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub StocktakingBarcodeQCCompletedEventHandler(ByVal sender As Object, ByVal e As StocktakingBarcodeQCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StocktakingBarcodeQCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckBarcodeImportFGExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcodeImportFGExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcodeImportFGExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ImportFGBarcodeIntoQCCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFGBarcodeIntoQCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFGBarcodeIntoQCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ShipmentReturnCompletedEventHandler(ByVal sender As Object, ByVal e As ShipmentReturnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShipmentReturnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkRejFGBarcodeExistW830CompletedEventHandler(ByVal sender As Object, ByVal e As ChkRejFGBarcodeExistW830CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkRejFGBarcodeExistW830CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub RejectFGBarcodeIntoW9902CompletedEventHandler(ByVal sender As Object, ByVal e As RejectFGBarcodeIntoW9902CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RejectFGBarcodeIntoW9902CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkShipReqNoExistCompletedEventHandler(ByVal sender As Object, ByVal e As ChkShipReqNoExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkShipReqNoExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkPalletNoExistShipReqNoCompletedEventHandler(ByVal sender As Object, ByVal e As ChkPalletNoExistShipReqNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkPalletNoExistShipReqNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckBarcodeExistShipReqNoCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBarcodeExistShipReqNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBarcodeExistShipReqNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ShipmentBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As ShipmentBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShipmentBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetRackInfoByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetRackInfoByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRackInfoByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertRackInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertRackInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertRackInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateRackInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRackInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRackInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteRackInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteRackInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteRackInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub RackInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As RackInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RackInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CheckRackIsEmptyCompletedEventHandler(ByVal sender As Object, ByVal e As CheckRackIsEmptyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckRackIsEmptyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetNextCusIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextCusIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextCusIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertCustomerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertCustomerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertCustomerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetCustomerInfoByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerInfoByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerInfoByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateCustomerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCustomerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCustomerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteCustomerInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCustomerInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCustomerInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub CustomerInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As CustomerInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CustomerInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStocktFGkReqDateExistCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStocktFGkReqDateExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStocktFGkReqDateExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStockFGRackNoExistProcessCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStockFGRackNoExistProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStockFGRackNoExistProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStockFGValidBarcodeCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStockFGValidBarcodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStockFGValidBarcodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub StocktakingBarcodeFGCompletedEventHandler(ByVal sender As Object, ByVal e As StocktakingBarcodeFGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StocktakingBarcodeFGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemInfoByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemInfoByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemInfoByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertItemInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertItemInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertItemInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateItemInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateItemInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateItemInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteItemInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteItemInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteItemInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ItemInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As ItemInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ItemInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetProductInfoByItemCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProductInfoByItemCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProductInfoByItemCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemCustomerInfoByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemCustomerInfoByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemCustomerInfoByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetItemDetailInfoByBCFromToCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemDetailInfoByBCFromToCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemDetailInfoByBCFromToCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetCurrentBoxNumberCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentBoxNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentBoxNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateCurrentBoxNumberCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCurrentBoxNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCurrentBoxNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub UpdateCurrentBoxNumberToStringCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCurrentBoxNumberToStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCurrentBoxNumberToStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseHistTrCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseHistTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseHistTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertWarehouseHistTrInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertWarehouseHistTrInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertWarehouseHistTrInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertWarehouseHistTrInfoToStringCompletedEventHandler(ByVal sender As Object, ByVal e As InsertWarehouseHistTrInfoToStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertWarehouseHistTrInfoToStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetShipmentReqDetailByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipmentReqDetailByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipmentReqDetailByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub DeleteShipmentReqDtlInfoTrByCdCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteShipmentReqDtlInfoTrByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteShipmentReqDtlInfoTrByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertShipmentReqDtlInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As InsertShipmentReqDtlInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertShipmentReqDtlInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetShipmentActDetailByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipmentActDetailByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipmentActDetailByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetAvaiableBarcodeByItemCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvaiableBarcodeByItemCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvaiableBarcodeByItemCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertShipmentActDtlInfoTrCompletedEventHandler(ByVal sender As Object, ByVal e As InsertShipmentActDtlInfoTrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertShipmentActDtlInfoTrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub ChkStkDelBarcodeExistCompletedEventHandler(ByVal sender As Object, ByVal e As ChkStkDelBarcodeExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkStkDelBarcodeExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub StockDeleteW900CompletedEventHandler(ByVal sender As Object, ByVal e As StockDeleteW900CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockDeleteW900CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub StockDeleteW830CompletedEventHandler(ByVal sender As Object, ByVal e As StockDeleteW830CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StockDeleteW830CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetWarehouseInfoByCdCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarehouseInfoByCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarehouseInfoByCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub InsertItemDtlInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InsertItemDtlInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertItemDtlInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
